// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
internal protocol APIProtocol: Sendable {
    /// 获取绝交用户列表
    ///
    /// - Remark: HTTP `GET /p1/blocklist`.
    /// - Remark: Generated from `#/paths//p1/blocklist/get(getBlocklist)`.
    func getBlocklist(_ input: Operations.getBlocklist.Input) async throws -> Operations.getBlocklist.Output
    /// 将用户添加到绝交列表
    ///
    /// - Remark: HTTP `POST /p1/blocklist`.
    /// - Remark: Generated from `#/paths//p1/blocklist/post(addToBlocklist)`.
    func addToBlocklist(_ input: Operations.addToBlocklist.Input) async throws -> Operations.addToBlocklist.Output
    /// 将用户从绝交列表移出
    ///
    /// - Remark: HTTP `DELETE /p1/blocklist/{id}`.
    /// - Remark: Generated from `#/paths//p1/blocklist/{id}/delete(removeFromBlocklist)`.
    func removeFromBlocklist(_ input: Operations.removeFromBlocklist.Input) async throws -> Operations.removeFromBlocklist.Output
    /// 标记通知为已读
    ///
    /// 标记通知为已读
    ///
    /// 不传id时会清空所有未读通知
    ///
    /// - Remark: HTTP `POST /p1/clear-notify`.
    /// - Remark: Generated from `#/paths//p1/clear-notify/post(clearNotice)`.
    func clearNotice(_ input: Operations.clearNotice.Input) async throws -> Operations.clearNotice.Output
    /// - Remark: HTTP `GET /p1/groups/-/posts/{postID}`.
    /// - Remark: Generated from `#/paths//p1/groups/-/posts/{postID}/get(getGroupPost)`.
    func getGroupPost(_ input: Operations.getGroupPost.Input) async throws -> Operations.getGroupPost.Output
    /// - Remark: HTTP `PUT /p1/groups/-/posts/{postID}`.
    /// - Remark: Generated from `#/paths//p1/groups/-/posts/{postID}/put(editGroupPost)`.
    func editGroupPost(_ input: Operations.editGroupPost.Input) async throws -> Operations.editGroupPost.Output
    /// - Remark: HTTP `DELETE /p1/groups/-/posts/{postID}`.
    /// - Remark: Generated from `#/paths//p1/groups/-/posts/{postID}/delete(deleteGroupPost)`.
    func deleteGroupPost(_ input: Operations.deleteGroupPost.Input) async throws -> Operations.deleteGroupPost.Output
    /// 获取帖子列表
    ///
    /// - Remark: HTTP `GET /p1/groups/-/topics/{id}`.
    /// - Remark: Generated from `#/paths//p1/groups/-/topics/{id}/get(getGroupTopicDetail)`.
    func getGroupTopicDetail(_ input: Operations.getGroupTopicDetail.Input) async throws -> Operations.getGroupTopicDetail.Output
    /// - Remark: HTTP `PUT /p1/groups/-/topics/{topicID}`.
    /// - Remark: Generated from `#/paths//p1/groups/-/topics/{topicID}/put(editGroupTopic)`.
    func editGroupTopic(_ input: Operations.editGroupTopic.Input) async throws -> Operations.editGroupTopic.Output
    /// - Remark: HTTP `POST /p1/groups/-/topics/{topicID}/replies`.
    /// - Remark: Generated from `#/paths//p1/groups/-/topics/{topicID}/replies/post(createGroupReply)`.
    func createGroupReply(_ input: Operations.createGroupReply.Input) async throws -> Operations.createGroupReply.Output
    /// 获取帖子列表
    ///
    /// - Remark: HTTP `GET /p1/groups/{groupName}/members`.
    /// - Remark: Generated from `#/paths//p1/groups/{groupName}/members/get(listGroupMembersByName)`.
    func listGroupMembersByName(_ input: Operations.listGroupMembersByName.Input) async throws -> Operations.listGroupMembersByName.Output
    /// 获取小组首页
    ///
    /// - Remark: HTTP `GET /p1/groups/{groupName}/profile`.
    /// - Remark: Generated from `#/paths//p1/groups/{groupName}/profile/get(getGroupProfile)`.
    func getGroupProfile(_ input: Operations.getGroupProfile.Input) async throws -> Operations.getGroupProfile.Output
    /// 获取帖子列表
    ///
    /// - Remark: HTTP `GET /p1/groups/{groupName}/topics`.
    /// - Remark: Generated from `#/paths//p1/groups/{groupName}/topics/get(getGroupTopicsByGroupName)`.
    func getGroupTopicsByGroupName(_ input: Operations.getGroupTopicsByGroupName.Input) async throws -> Operations.getGroupTopicsByGroupName.Output
    /// - Remark: HTTP `POST /p1/groups/{groupName}/topics`.
    /// - Remark: Generated from `#/paths//p1/groups/{groupName}/topics/post(createNewGroupTopic)`.
    func createNewGroupTopic(_ input: Operations.createNewGroupTopic.Input) async throws -> Operations.createNewGroupTopic.Output
    /// 需要 [turnstile](https://developers.cloudflare.com/turnstile/get-started/client-side-rendering/)
    ///
    /// next.bgm.tv 域名对应的 site-key 为 `0x4AAAAAAABkMYinukE8nzYS`
    ///
    /// dev.bgm38.com 域名使用测试用的 site-key `1x00000000000000000000AA`
    ///
    /// - Remark: HTTP `POST /p1/login`.
    /// - Remark: Generated from `#/paths//p1/login/post(login)`.
    func login(_ input: Operations.login.Input) async throws -> Operations.login.Output
    /// 登出
    ///
    /// - Remark: HTTP `POST /p1/logout`.
    /// - Remark: Generated from `#/paths//p1/logout/post(logout)`.
    func logout(_ input: Operations.logout.Input) async throws -> Operations.logout.Output
    /// - Remark: HTTP `GET /p1/me`.
    /// - Remark: Generated from `#/paths//p1/me/get(getCurrentUser)`.
    func getCurrentUser(_ input: Operations.getCurrentUser.Input) async throws -> Operations.getCurrentUser.Output
    /// 获取未读通知
    ///
    /// - Remark: HTTP `GET /p1/notify`.
    /// - Remark: Generated from `#/paths//p1/notify/get(listNotice)`.
    func listNotice(_ input: Operations.listNotice.Input) async throws -> Operations.listNotice.Output
    /// 编辑条目的剧集吐槽
    ///
    /// - Remark: HTTP `PUT /p1/subjects/-/episode/-/comments/{commentID}`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/episode/-/comments/{commentID}/put(editSubjectEpComment)`.
    func editSubjectEpComment(_ input: Operations.editSubjectEpComment.Input) async throws -> Operations.editSubjectEpComment.Output
    /// 删除条目的剧集吐槽
    ///
    /// - Remark: HTTP `DELETE /p1/subjects/-/episode/-/comments/{commentID}`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/episode/-/comments/{commentID}/delete(deleteSubjectEpComment)`.
    func deleteSubjectEpComment(_ input: Operations.deleteSubjectEpComment.Input) async throws -> Operations.deleteSubjectEpComment.Output
    /// 获取条目的剧集吐槽箱
    ///
    /// - Remark: HTTP `GET /p1/subjects/-/episode/{episodeID}/comments`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/episode/{episodeID}/comments/get(getSubjectEpisodeComments)`.
    func getSubjectEpisodeComments(_ input: Operations.getSubjectEpisodeComments.Input) async throws -> Operations.getSubjectEpisodeComments.Output
    /// 创建条目的剧集吐槽
    ///
    /// 需要 [turnstile](https://developers.cloudflare.com/turnstile/get-started/client-side-rendering/)
    ///
    /// next.bgm.tv 域名对应的 site-key 为 `0x4AAAAAAABkMYinukE8nzYS`
    ///
    /// dev.bgm38.com 域名使用测试用的 site-key `1x00000000000000000000AA`
    ///
    /// - Remark: HTTP `POST /p1/subjects/-/episode/{episodeID}/comments`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/episode/{episodeID}/comments/post(createSubjectEpComment)`.
    func createSubjectEpComment(_ input: Operations.createSubjectEpComment.Input) async throws -> Operations.createSubjectEpComment.Output
    /// 获取条目讨论版回复
    ///
    /// - Remark: HTTP `GET /p1/subjects/-/posts/{postID}`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/posts/{postID}/get(getSubjectPost)`.
    func getSubjectPost(_ input: Operations.getSubjectPost.Input) async throws -> Operations.getSubjectPost.Output
    /// 编辑自己创建的条目讨论版回复
    ///
    /// - Remark: HTTP `PUT /p1/subjects/-/posts/{postID}`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/posts/{postID}/put(editSubjectPost)`.
    func editSubjectPost(_ input: Operations.editSubjectPost.Input) async throws -> Operations.editSubjectPost.Output
    /// 删除自己创建的条目讨论版回复
    ///
    /// - Remark: HTTP `DELETE /p1/subjects/-/posts/{postID}`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/posts/{postID}/delete(deleteSubjectPost)`.
    func deleteSubjectPost(_ input: Operations.deleteSubjectPost.Input) async throws -> Operations.deleteSubjectPost.Output
    /// 获取帖子列表
    ///
    /// - Remark: HTTP `GET /p1/subjects/-/topics/{topicID}`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/topics/{topicID}/get(getSubjectTopicDetail)`.
    func getSubjectTopicDetail(_ input: Operations.getSubjectTopicDetail.Input) async throws -> Operations.getSubjectTopicDetail.Output
    /// 编辑自己创建的条目讨论版
    ///
    /// - Remark: HTTP `PUT /p1/subjects/-/topics/{topicID}`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/topics/{topicID}/put(editSubjectTopic)`.
    func editSubjectTopic(_ input: Operations.editSubjectTopic.Input) async throws -> Operations.editSubjectTopic.Output
    /// 创建条目讨论版回复
    ///
    /// 需要 [turnstile](https://developers.cloudflare.com/turnstile/get-started/client-side-rendering/)
    ///
    /// next.bgm.tv 域名对应的 site-key 为 `0x4AAAAAAABkMYinukE8nzYS`
    ///
    /// dev.bgm38.com 域名使用测试用的 site-key `1x00000000000000000000AA`
    ///
    /// - Remark: HTTP `POST /p1/subjects/-/topics/{topicID}/replies`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/topics/{topicID}/replies/post(createSubjectReply)`.
    func createSubjectReply(_ input: Operations.createSubjectReply.Input) async throws -> Operations.createSubjectReply.Output
    /// 获取条目的吐槽箱
    ///
    /// - Remark: HTTP `GET /p1/subjects/{subjectID}/comments`.
    /// - Remark: Generated from `#/paths//p1/subjects/{subjectID}/comments/get(subjectComments)`.
    func subjectComments(_ input: Operations.subjectComments.Input) async throws -> Operations.subjectComments.Output
    /// 获取条目讨论版列表
    ///
    /// - Remark: HTTP `GET /p1/subjects/{subjectID}/topics`.
    /// - Remark: Generated from `#/paths//p1/subjects/{subjectID}/topics/get(getSubjectTopicsBySubjectId)`.
    func getSubjectTopicsBySubjectId(_ input: Operations.getSubjectTopicsBySubjectId.Input) async throws -> Operations.getSubjectTopicsBySubjectId.Output
    /// 创建条目讨论版
    ///
    /// 需要 [turnstile](https://developers.cloudflare.com/turnstile/get-started/client-side-rendering/)
    ///
    /// next.bgm.tv 域名对应的 site-key 为 `0x4AAAAAAABkMYinukE8nzYS`
    ///
    /// dev.bgm38.com 域名使用测试用的 site-key `1x00000000000000000000AA`
    ///
    /// - Remark: HTTP `POST /p1/subjects/{subjectID}/topics`.
    /// - Remark: Generated from `#/paths//p1/subjects/{subjectID}/topics/post(createNewSubjectTopic)`.
    func createNewSubjectTopic(_ input: Operations.createNewSubjectTopic.Input) async throws -> Operations.createNewSubjectTopic.Output
    /// - Remark: HTTP `GET /p1/wiki/ep/{episodeID}`.
    /// - Remark: Generated from `#/paths//p1/wiki/ep/{episodeID}/get(getEpisodeWikiInfo)`.
    func getEpisodeWikiInfo(_ input: Operations.getEpisodeWikiInfo.Input) async throws -> Operations.getEpisodeWikiInfo.Output
    /// - Remark: HTTP `PATCH /p1/wiki/ep/{episodeID}`.
    /// - Remark: Generated from `#/paths//p1/wiki/ep/{episodeID}/patch(patchEpisodeWikiInfo)`.
    func patchEpisodeWikiInfo(_ input: Operations.patchEpisodeWikiInfo.Input) async throws -> Operations.patchEpisodeWikiInfo.Output
    /// - Remark: HTTP `POST /p1/wiki/lock/subjects`.
    /// - Remark: Generated from `#/paths//p1/wiki/lock/subjects/post(lockSubject)`.
    func lockSubject(_ input: Operations.lockSubject.Input) async throws -> Operations.lockSubject.Output
    /// 获取当前的 wiki 信息
    ///
    /// - Remark: HTTP `GET /p1/wiki/persons/{personID}`.
    /// - Remark: Generated from `#/paths//p1/wiki/persons/{personID}/get(getPersonWikiInfo)`.
    func getPersonWikiInfo(_ input: Operations.getPersonWikiInfo.Input) async throws -> Operations.getPersonWikiInfo.Output
    /// - Remark: HTTP `PATCH /p1/wiki/persons/{personID}`.
    /// - Remark: Generated from `#/paths//p1/wiki/persons/{personID}/patch(patchPersonInfo)`.
    func patchPersonInfo(_ input: Operations.patchPersonInfo.Input) async throws -> Operations.patchPersonInfo.Output
    /// 获取最近两天的wiki更新
    ///
    /// - Remark: HTTP `GET /p1/wiki/recent`.
    /// - Remark: Generated from `#/paths//p1/wiki/recent/get(getRecentWiki)`.
    func getRecentWiki(_ input: Operations.getRecentWiki.Input) async throws -> Operations.getRecentWiki.Output
    /// 创建新条目
    ///
    /// - Remark: HTTP `POST /p1/wiki/subjects`.
    /// - Remark: Generated from `#/paths//p1/wiki/subjects/post(createNewSubject)`.
    func createNewSubject(_ input: Operations.createNewSubject.Input) async throws -> Operations.createNewSubject.Output
    /// 获取当前的 wiki 信息
    ///
    /// - Remark: HTTP `GET /p1/wiki/subjects/{subjectID}`.
    /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/get(subjectInfo)`.
    func subjectInfo(_ input: Operations.subjectInfo.Input) async throws -> Operations.subjectInfo.Output
    /// - Remark: HTTP `PATCH /p1/wiki/subjects/{subjectID}`.
    /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/patch(patchSubjectInfo)`.
    func patchSubjectInfo(_ input: Operations.patchSubjectInfo.Input) async throws -> Operations.patchSubjectInfo.Output
    /// 需要 `subjectWikiEdit` 权限
    ///
    /// - Remark: HTTP `PUT /p1/wiki/subjects/{subjectID}`.
    /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/put(putSubjectInfo)`.
    func putSubjectInfo(_ input: Operations.putSubjectInfo.Input) async throws -> Operations.putSubjectInfo.Output
    /// - Remark: HTTP `GET /p1/wiki/subjects/{subjectID}/covers`.
    /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/covers/get(listSubjectCovers)`.
    func listSubjectCovers(_ input: Operations.listSubjectCovers.Input) async throws -> Operations.listSubjectCovers.Output
    /// 需要 `subjectWikiEdit` 权限
    ///
    /// - Remark: HTTP `POST /p1/wiki/subjects/{subjectID}/covers`.
    /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/covers/post(uploadSubjectCover)`.
    func uploadSubjectCover(_ input: Operations.uploadSubjectCover.Input) async throws -> Operations.uploadSubjectCover.Output
    /// 为条目封面投票
    ///
    /// 需要 `subjectWikiEdit` 权限
    ///
    /// - Remark: HTTP `POST /p1/wiki/subjects/{subjectID}/covers/{imageID}/vote`.
    /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/covers/{imageID}/vote/post(voteSubjectCover)`.
    func voteSubjectCover(_ input: Operations.voteSubjectCover.Input) async throws -> Operations.voteSubjectCover.Output
    /// 撤消条目封面投票
    ///
    /// 需要 `subjectWikiEdit` 权限
    ///
    /// - Remark: HTTP `DELETE /p1/wiki/subjects/{subjectID}/covers/{imageID}/vote`.
    /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/covers/{imageID}/vote/delete(unvoteSubjectCover)`.
    func unvoteSubjectCover(_ input: Operations.unvoteSubjectCover.Input) async throws -> Operations.unvoteSubjectCover.Output
    /// 获取当前的 wiki 信息
    ///
    /// - Remark: HTTP `GET /p1/wiki/subjects/{subjectID}/history-summary`.
    /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/history-summary/get(subjectEditHistorySummary)`.
    func subjectEditHistorySummary(_ input: Operations.subjectEditHistorySummary.Input) async throws -> Operations.subjectEditHistorySummary.Output
    /// - Remark: HTTP `POST /p1/wiki/unlock/subjects`.
    /// - Remark: Generated from `#/paths//p1/wiki/unlock/subjects/post(unlockSubject)`.
    func unlockSubject(_ input: Operations.unlockSubject.Input) async throws -> Operations.unlockSubject.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// 获取绝交用户列表
    ///
    /// - Remark: HTTP `GET /p1/blocklist`.
    /// - Remark: Generated from `#/paths//p1/blocklist/get(getBlocklist)`.
    internal func getBlocklist(headers: Operations.getBlocklist.Input.Headers = .init()) async throws -> Operations.getBlocklist.Output {
        try await getBlocklist(Operations.getBlocklist.Input(headers: headers))
    }
    /// 将用户添加到绝交列表
    ///
    /// - Remark: HTTP `POST /p1/blocklist`.
    /// - Remark: Generated from `#/paths//p1/blocklist/post(addToBlocklist)`.
    internal func addToBlocklist(
        headers: Operations.addToBlocklist.Input.Headers = .init(),
        body: Operations.addToBlocklist.Input.Body
    ) async throws -> Operations.addToBlocklist.Output {
        try await addToBlocklist(Operations.addToBlocklist.Input(
            headers: headers,
            body: body
        ))
    }
    /// 将用户从绝交列表移出
    ///
    /// - Remark: HTTP `DELETE /p1/blocklist/{id}`.
    /// - Remark: Generated from `#/paths//p1/blocklist/{id}/delete(removeFromBlocklist)`.
    internal func removeFromBlocklist(
        path: Operations.removeFromBlocklist.Input.Path,
        headers: Operations.removeFromBlocklist.Input.Headers = .init()
    ) async throws -> Operations.removeFromBlocklist.Output {
        try await removeFromBlocklist(Operations.removeFromBlocklist.Input(
            path: path,
            headers: headers
        ))
    }
    /// 标记通知为已读
    ///
    /// 标记通知为已读
    ///
    /// 不传id时会清空所有未读通知
    ///
    /// - Remark: HTTP `POST /p1/clear-notify`.
    /// - Remark: Generated from `#/paths//p1/clear-notify/post(clearNotice)`.
    internal func clearNotice(
        headers: Operations.clearNotice.Input.Headers = .init(),
        body: Operations.clearNotice.Input.Body? = nil
    ) async throws -> Operations.clearNotice.Output {
        try await clearNotice(Operations.clearNotice.Input(
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `GET /p1/groups/-/posts/{postID}`.
    /// - Remark: Generated from `#/paths//p1/groups/-/posts/{postID}/get(getGroupPost)`.
    internal func getGroupPost(
        path: Operations.getGroupPost.Input.Path,
        headers: Operations.getGroupPost.Input.Headers = .init()
    ) async throws -> Operations.getGroupPost.Output {
        try await getGroupPost(Operations.getGroupPost.Input(
            path: path,
            headers: headers
        ))
    }
    /// - Remark: HTTP `PUT /p1/groups/-/posts/{postID}`.
    /// - Remark: Generated from `#/paths//p1/groups/-/posts/{postID}/put(editGroupPost)`.
    internal func editGroupPost(
        path: Operations.editGroupPost.Input.Path,
        headers: Operations.editGroupPost.Input.Headers = .init(),
        body: Operations.editGroupPost.Input.Body
    ) async throws -> Operations.editGroupPost.Output {
        try await editGroupPost(Operations.editGroupPost.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `DELETE /p1/groups/-/posts/{postID}`.
    /// - Remark: Generated from `#/paths//p1/groups/-/posts/{postID}/delete(deleteGroupPost)`.
    internal func deleteGroupPost(
        path: Operations.deleteGroupPost.Input.Path,
        headers: Operations.deleteGroupPost.Input.Headers = .init()
    ) async throws -> Operations.deleteGroupPost.Output {
        try await deleteGroupPost(Operations.deleteGroupPost.Input(
            path: path,
            headers: headers
        ))
    }
    /// 获取帖子列表
    ///
    /// - Remark: HTTP `GET /p1/groups/-/topics/{id}`.
    /// - Remark: Generated from `#/paths//p1/groups/-/topics/{id}/get(getGroupTopicDetail)`.
    internal func getGroupTopicDetail(
        path: Operations.getGroupTopicDetail.Input.Path,
        headers: Operations.getGroupTopicDetail.Input.Headers = .init()
    ) async throws -> Operations.getGroupTopicDetail.Output {
        try await getGroupTopicDetail(Operations.getGroupTopicDetail.Input(
            path: path,
            headers: headers
        ))
    }
    /// - Remark: HTTP `PUT /p1/groups/-/topics/{topicID}`.
    /// - Remark: Generated from `#/paths//p1/groups/-/topics/{topicID}/put(editGroupTopic)`.
    internal func editGroupTopic(
        path: Operations.editGroupTopic.Input.Path,
        headers: Operations.editGroupTopic.Input.Headers = .init(),
        body: Operations.editGroupTopic.Input.Body? = nil
    ) async throws -> Operations.editGroupTopic.Output {
        try await editGroupTopic(Operations.editGroupTopic.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `POST /p1/groups/-/topics/{topicID}/replies`.
    /// - Remark: Generated from `#/paths//p1/groups/-/topics/{topicID}/replies/post(createGroupReply)`.
    internal func createGroupReply(
        path: Operations.createGroupReply.Input.Path,
        headers: Operations.createGroupReply.Input.Headers = .init(),
        body: Operations.createGroupReply.Input.Body
    ) async throws -> Operations.createGroupReply.Output {
        try await createGroupReply(Operations.createGroupReply.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// 获取帖子列表
    ///
    /// - Remark: HTTP `GET /p1/groups/{groupName}/members`.
    /// - Remark: Generated from `#/paths//p1/groups/{groupName}/members/get(listGroupMembersByName)`.
    internal func listGroupMembersByName(
        path: Operations.listGroupMembersByName.Input.Path,
        query: Operations.listGroupMembersByName.Input.Query = .init(),
        headers: Operations.listGroupMembersByName.Input.Headers = .init()
    ) async throws -> Operations.listGroupMembersByName.Output {
        try await listGroupMembersByName(Operations.listGroupMembersByName.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// 获取小组首页
    ///
    /// - Remark: HTTP `GET /p1/groups/{groupName}/profile`.
    /// - Remark: Generated from `#/paths//p1/groups/{groupName}/profile/get(getGroupProfile)`.
    internal func getGroupProfile(
        path: Operations.getGroupProfile.Input.Path,
        query: Operations.getGroupProfile.Input.Query = .init(),
        headers: Operations.getGroupProfile.Input.Headers = .init()
    ) async throws -> Operations.getGroupProfile.Output {
        try await getGroupProfile(Operations.getGroupProfile.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// 获取帖子列表
    ///
    /// - Remark: HTTP `GET /p1/groups/{groupName}/topics`.
    /// - Remark: Generated from `#/paths//p1/groups/{groupName}/topics/get(getGroupTopicsByGroupName)`.
    internal func getGroupTopicsByGroupName(
        path: Operations.getGroupTopicsByGroupName.Input.Path,
        query: Operations.getGroupTopicsByGroupName.Input.Query = .init(),
        headers: Operations.getGroupTopicsByGroupName.Input.Headers = .init()
    ) async throws -> Operations.getGroupTopicsByGroupName.Output {
        try await getGroupTopicsByGroupName(Operations.getGroupTopicsByGroupName.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `POST /p1/groups/{groupName}/topics`.
    /// - Remark: Generated from `#/paths//p1/groups/{groupName}/topics/post(createNewGroupTopic)`.
    internal func createNewGroupTopic(
        path: Operations.createNewGroupTopic.Input.Path,
        headers: Operations.createNewGroupTopic.Input.Headers = .init(),
        body: Operations.createNewGroupTopic.Input.Body? = nil
    ) async throws -> Operations.createNewGroupTopic.Output {
        try await createNewGroupTopic(Operations.createNewGroupTopic.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// 需要 [turnstile](https://developers.cloudflare.com/turnstile/get-started/client-side-rendering/)
    ///
    /// next.bgm.tv 域名对应的 site-key 为 `0x4AAAAAAABkMYinukE8nzYS`
    ///
    /// dev.bgm38.com 域名使用测试用的 site-key `1x00000000000000000000AA`
    ///
    /// - Remark: HTTP `POST /p1/login`.
    /// - Remark: Generated from `#/paths//p1/login/post(login)`.
    internal func login(
        headers: Operations.login.Input.Headers = .init(),
        body: Operations.login.Input.Body? = nil
    ) async throws -> Operations.login.Output {
        try await login(Operations.login.Input(
            headers: headers,
            body: body
        ))
    }
    /// 登出
    ///
    /// - Remark: HTTP `POST /p1/logout`.
    /// - Remark: Generated from `#/paths//p1/logout/post(logout)`.
    internal func logout(
        headers: Operations.logout.Input.Headers = .init(),
        body: Operations.logout.Input.Body? = nil
    ) async throws -> Operations.logout.Output {
        try await logout(Operations.logout.Input(
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `GET /p1/me`.
    /// - Remark: Generated from `#/paths//p1/me/get(getCurrentUser)`.
    internal func getCurrentUser(headers: Operations.getCurrentUser.Input.Headers = .init()) async throws -> Operations.getCurrentUser.Output {
        try await getCurrentUser(Operations.getCurrentUser.Input(headers: headers))
    }
    /// 获取未读通知
    ///
    /// - Remark: HTTP `GET /p1/notify`.
    /// - Remark: Generated from `#/paths//p1/notify/get(listNotice)`.
    internal func listNotice(
        query: Operations.listNotice.Input.Query = .init(),
        headers: Operations.listNotice.Input.Headers = .init()
    ) async throws -> Operations.listNotice.Output {
        try await listNotice(Operations.listNotice.Input(
            query: query,
            headers: headers
        ))
    }
    /// 编辑条目的剧集吐槽
    ///
    /// - Remark: HTTP `PUT /p1/subjects/-/episode/-/comments/{commentID}`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/episode/-/comments/{commentID}/put(editSubjectEpComment)`.
    internal func editSubjectEpComment(
        path: Operations.editSubjectEpComment.Input.Path,
        headers: Operations.editSubjectEpComment.Input.Headers = .init(),
        body: Operations.editSubjectEpComment.Input.Body
    ) async throws -> Operations.editSubjectEpComment.Output {
        try await editSubjectEpComment(Operations.editSubjectEpComment.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// 删除条目的剧集吐槽
    ///
    /// - Remark: HTTP `DELETE /p1/subjects/-/episode/-/comments/{commentID}`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/episode/-/comments/{commentID}/delete(deleteSubjectEpComment)`.
    internal func deleteSubjectEpComment(
        path: Operations.deleteSubjectEpComment.Input.Path,
        headers: Operations.deleteSubjectEpComment.Input.Headers = .init()
    ) async throws -> Operations.deleteSubjectEpComment.Output {
        try await deleteSubjectEpComment(Operations.deleteSubjectEpComment.Input(
            path: path,
            headers: headers
        ))
    }
    /// 获取条目的剧集吐槽箱
    ///
    /// - Remark: HTTP `GET /p1/subjects/-/episode/{episodeID}/comments`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/episode/{episodeID}/comments/get(getSubjectEpisodeComments)`.
    internal func getSubjectEpisodeComments(
        path: Operations.getSubjectEpisodeComments.Input.Path,
        headers: Operations.getSubjectEpisodeComments.Input.Headers = .init()
    ) async throws -> Operations.getSubjectEpisodeComments.Output {
        try await getSubjectEpisodeComments(Operations.getSubjectEpisodeComments.Input(
            path: path,
            headers: headers
        ))
    }
    /// 创建条目的剧集吐槽
    ///
    /// 需要 [turnstile](https://developers.cloudflare.com/turnstile/get-started/client-side-rendering/)
    ///
    /// next.bgm.tv 域名对应的 site-key 为 `0x4AAAAAAABkMYinukE8nzYS`
    ///
    /// dev.bgm38.com 域名使用测试用的 site-key `1x00000000000000000000AA`
    ///
    /// - Remark: HTTP `POST /p1/subjects/-/episode/{episodeID}/comments`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/episode/{episodeID}/comments/post(createSubjectEpComment)`.
    internal func createSubjectEpComment(
        path: Operations.createSubjectEpComment.Input.Path,
        headers: Operations.createSubjectEpComment.Input.Headers = .init(),
        body: Operations.createSubjectEpComment.Input.Body
    ) async throws -> Operations.createSubjectEpComment.Output {
        try await createSubjectEpComment(Operations.createSubjectEpComment.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// 获取条目讨论版回复
    ///
    /// - Remark: HTTP `GET /p1/subjects/-/posts/{postID}`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/posts/{postID}/get(getSubjectPost)`.
    internal func getSubjectPost(
        path: Operations.getSubjectPost.Input.Path,
        headers: Operations.getSubjectPost.Input.Headers = .init()
    ) async throws -> Operations.getSubjectPost.Output {
        try await getSubjectPost(Operations.getSubjectPost.Input(
            path: path,
            headers: headers
        ))
    }
    /// 编辑自己创建的条目讨论版回复
    ///
    /// - Remark: HTTP `PUT /p1/subjects/-/posts/{postID}`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/posts/{postID}/put(editSubjectPost)`.
    internal func editSubjectPost(
        path: Operations.editSubjectPost.Input.Path,
        headers: Operations.editSubjectPost.Input.Headers = .init(),
        body: Operations.editSubjectPost.Input.Body
    ) async throws -> Operations.editSubjectPost.Output {
        try await editSubjectPost(Operations.editSubjectPost.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// 删除自己创建的条目讨论版回复
    ///
    /// - Remark: HTTP `DELETE /p1/subjects/-/posts/{postID}`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/posts/{postID}/delete(deleteSubjectPost)`.
    internal func deleteSubjectPost(
        path: Operations.deleteSubjectPost.Input.Path,
        headers: Operations.deleteSubjectPost.Input.Headers = .init()
    ) async throws -> Operations.deleteSubjectPost.Output {
        try await deleteSubjectPost(Operations.deleteSubjectPost.Input(
            path: path,
            headers: headers
        ))
    }
    /// 获取帖子列表
    ///
    /// - Remark: HTTP `GET /p1/subjects/-/topics/{topicID}`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/topics/{topicID}/get(getSubjectTopicDetail)`.
    internal func getSubjectTopicDetail(
        path: Operations.getSubjectTopicDetail.Input.Path,
        headers: Operations.getSubjectTopicDetail.Input.Headers = .init()
    ) async throws -> Operations.getSubjectTopicDetail.Output {
        try await getSubjectTopicDetail(Operations.getSubjectTopicDetail.Input(
            path: path,
            headers: headers
        ))
    }
    /// 编辑自己创建的条目讨论版
    ///
    /// - Remark: HTTP `PUT /p1/subjects/-/topics/{topicID}`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/topics/{topicID}/put(editSubjectTopic)`.
    internal func editSubjectTopic(
        path: Operations.editSubjectTopic.Input.Path,
        headers: Operations.editSubjectTopic.Input.Headers = .init(),
        body: Operations.editSubjectTopic.Input.Body? = nil
    ) async throws -> Operations.editSubjectTopic.Output {
        try await editSubjectTopic(Operations.editSubjectTopic.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// 创建条目讨论版回复
    ///
    /// 需要 [turnstile](https://developers.cloudflare.com/turnstile/get-started/client-side-rendering/)
    ///
    /// next.bgm.tv 域名对应的 site-key 为 `0x4AAAAAAABkMYinukE8nzYS`
    ///
    /// dev.bgm38.com 域名使用测试用的 site-key `1x00000000000000000000AA`
    ///
    /// - Remark: HTTP `POST /p1/subjects/-/topics/{topicID}/replies`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/topics/{topicID}/replies/post(createSubjectReply)`.
    internal func createSubjectReply(
        path: Operations.createSubjectReply.Input.Path,
        headers: Operations.createSubjectReply.Input.Headers = .init(),
        body: Operations.createSubjectReply.Input.Body
    ) async throws -> Operations.createSubjectReply.Output {
        try await createSubjectReply(Operations.createSubjectReply.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// 获取条目的吐槽箱
    ///
    /// - Remark: HTTP `GET /p1/subjects/{subjectID}/comments`.
    /// - Remark: Generated from `#/paths//p1/subjects/{subjectID}/comments/get(subjectComments)`.
    internal func subjectComments(
        path: Operations.subjectComments.Input.Path,
        query: Operations.subjectComments.Input.Query = .init(),
        headers: Operations.subjectComments.Input.Headers = .init()
    ) async throws -> Operations.subjectComments.Output {
        try await subjectComments(Operations.subjectComments.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// 获取条目讨论版列表
    ///
    /// - Remark: HTTP `GET /p1/subjects/{subjectID}/topics`.
    /// - Remark: Generated from `#/paths//p1/subjects/{subjectID}/topics/get(getSubjectTopicsBySubjectId)`.
    internal func getSubjectTopicsBySubjectId(
        path: Operations.getSubjectTopicsBySubjectId.Input.Path,
        query: Operations.getSubjectTopicsBySubjectId.Input.Query = .init(),
        headers: Operations.getSubjectTopicsBySubjectId.Input.Headers = .init()
    ) async throws -> Operations.getSubjectTopicsBySubjectId.Output {
        try await getSubjectTopicsBySubjectId(Operations.getSubjectTopicsBySubjectId.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// 创建条目讨论版
    ///
    /// 需要 [turnstile](https://developers.cloudflare.com/turnstile/get-started/client-side-rendering/)
    ///
    /// next.bgm.tv 域名对应的 site-key 为 `0x4AAAAAAABkMYinukE8nzYS`
    ///
    /// dev.bgm38.com 域名使用测试用的 site-key `1x00000000000000000000AA`
    ///
    /// - Remark: HTTP `POST /p1/subjects/{subjectID}/topics`.
    /// - Remark: Generated from `#/paths//p1/subjects/{subjectID}/topics/post(createNewSubjectTopic)`.
    internal func createNewSubjectTopic(
        path: Operations.createNewSubjectTopic.Input.Path,
        headers: Operations.createNewSubjectTopic.Input.Headers = .init(),
        body: Operations.createNewSubjectTopic.Input.Body? = nil
    ) async throws -> Operations.createNewSubjectTopic.Output {
        try await createNewSubjectTopic(Operations.createNewSubjectTopic.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `GET /p1/wiki/ep/{episodeID}`.
    /// - Remark: Generated from `#/paths//p1/wiki/ep/{episodeID}/get(getEpisodeWikiInfo)`.
    internal func getEpisodeWikiInfo(
        path: Operations.getEpisodeWikiInfo.Input.Path,
        headers: Operations.getEpisodeWikiInfo.Input.Headers = .init()
    ) async throws -> Operations.getEpisodeWikiInfo.Output {
        try await getEpisodeWikiInfo(Operations.getEpisodeWikiInfo.Input(
            path: path,
            headers: headers
        ))
    }
    /// - Remark: HTTP `PATCH /p1/wiki/ep/{episodeID}`.
    /// - Remark: Generated from `#/paths//p1/wiki/ep/{episodeID}/patch(patchEpisodeWikiInfo)`.
    internal func patchEpisodeWikiInfo(
        path: Operations.patchEpisodeWikiInfo.Input.Path,
        headers: Operations.patchEpisodeWikiInfo.Input.Headers = .init(),
        body: Operations.patchEpisodeWikiInfo.Input.Body
    ) async throws -> Operations.patchEpisodeWikiInfo.Output {
        try await patchEpisodeWikiInfo(Operations.patchEpisodeWikiInfo.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `POST /p1/wiki/lock/subjects`.
    /// - Remark: Generated from `#/paths//p1/wiki/lock/subjects/post(lockSubject)`.
    internal func lockSubject(
        headers: Operations.lockSubject.Input.Headers = .init(),
        body: Operations.lockSubject.Input.Body
    ) async throws -> Operations.lockSubject.Output {
        try await lockSubject(Operations.lockSubject.Input(
            headers: headers,
            body: body
        ))
    }
    /// 获取当前的 wiki 信息
    ///
    /// - Remark: HTTP `GET /p1/wiki/persons/{personID}`.
    /// - Remark: Generated from `#/paths//p1/wiki/persons/{personID}/get(getPersonWikiInfo)`.
    internal func getPersonWikiInfo(
        path: Operations.getPersonWikiInfo.Input.Path,
        headers: Operations.getPersonWikiInfo.Input.Headers = .init()
    ) async throws -> Operations.getPersonWikiInfo.Output {
        try await getPersonWikiInfo(Operations.getPersonWikiInfo.Input(
            path: path,
            headers: headers
        ))
    }
    /// - Remark: HTTP `PATCH /p1/wiki/persons/{personID}`.
    /// - Remark: Generated from `#/paths//p1/wiki/persons/{personID}/patch(patchPersonInfo)`.
    internal func patchPersonInfo(
        path: Operations.patchPersonInfo.Input.Path,
        headers: Operations.patchPersonInfo.Input.Headers = .init(),
        body: Operations.patchPersonInfo.Input.Body
    ) async throws -> Operations.patchPersonInfo.Output {
        try await patchPersonInfo(Operations.patchPersonInfo.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// 获取最近两天的wiki更新
    ///
    /// - Remark: HTTP `GET /p1/wiki/recent`.
    /// - Remark: Generated from `#/paths//p1/wiki/recent/get(getRecentWiki)`.
    internal func getRecentWiki(
        path: Operations.getRecentWiki.Input.Path,
        headers: Operations.getRecentWiki.Input.Headers = .init()
    ) async throws -> Operations.getRecentWiki.Output {
        try await getRecentWiki(Operations.getRecentWiki.Input(
            path: path,
            headers: headers
        ))
    }
    /// 创建新条目
    ///
    /// - Remark: HTTP `POST /p1/wiki/subjects`.
    /// - Remark: Generated from `#/paths//p1/wiki/subjects/post(createNewSubject)`.
    internal func createNewSubject(
        headers: Operations.createNewSubject.Input.Headers = .init(),
        body: Operations.createNewSubject.Input.Body
    ) async throws -> Operations.createNewSubject.Output {
        try await createNewSubject(Operations.createNewSubject.Input(
            headers: headers,
            body: body
        ))
    }
    /// 获取当前的 wiki 信息
    ///
    /// - Remark: HTTP `GET /p1/wiki/subjects/{subjectID}`.
    /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/get(subjectInfo)`.
    internal func subjectInfo(
        path: Operations.subjectInfo.Input.Path,
        headers: Operations.subjectInfo.Input.Headers = .init()
    ) async throws -> Operations.subjectInfo.Output {
        try await subjectInfo(Operations.subjectInfo.Input(
            path: path,
            headers: headers
        ))
    }
    /// - Remark: HTTP `PATCH /p1/wiki/subjects/{subjectID}`.
    /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/patch(patchSubjectInfo)`.
    internal func patchSubjectInfo(
        path: Operations.patchSubjectInfo.Input.Path,
        headers: Operations.patchSubjectInfo.Input.Headers = .init(),
        body: Operations.patchSubjectInfo.Input.Body
    ) async throws -> Operations.patchSubjectInfo.Output {
        try await patchSubjectInfo(Operations.patchSubjectInfo.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// 需要 `subjectWikiEdit` 权限
    ///
    /// - Remark: HTTP `PUT /p1/wiki/subjects/{subjectID}`.
    /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/put(putSubjectInfo)`.
    internal func putSubjectInfo(
        path: Operations.putSubjectInfo.Input.Path,
        headers: Operations.putSubjectInfo.Input.Headers = .init(),
        body: Operations.putSubjectInfo.Input.Body
    ) async throws -> Operations.putSubjectInfo.Output {
        try await putSubjectInfo(Operations.putSubjectInfo.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `GET /p1/wiki/subjects/{subjectID}/covers`.
    /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/covers/get(listSubjectCovers)`.
    internal func listSubjectCovers(
        path: Operations.listSubjectCovers.Input.Path,
        headers: Operations.listSubjectCovers.Input.Headers = .init()
    ) async throws -> Operations.listSubjectCovers.Output {
        try await listSubjectCovers(Operations.listSubjectCovers.Input(
            path: path,
            headers: headers
        ))
    }
    /// 需要 `subjectWikiEdit` 权限
    ///
    /// - Remark: HTTP `POST /p1/wiki/subjects/{subjectID}/covers`.
    /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/covers/post(uploadSubjectCover)`.
    internal func uploadSubjectCover(
        path: Operations.uploadSubjectCover.Input.Path,
        headers: Operations.uploadSubjectCover.Input.Headers = .init(),
        body: Operations.uploadSubjectCover.Input.Body
    ) async throws -> Operations.uploadSubjectCover.Output {
        try await uploadSubjectCover(Operations.uploadSubjectCover.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// 为条目封面投票
    ///
    /// 需要 `subjectWikiEdit` 权限
    ///
    /// - Remark: HTTP `POST /p1/wiki/subjects/{subjectID}/covers/{imageID}/vote`.
    /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/covers/{imageID}/vote/post(voteSubjectCover)`.
    internal func voteSubjectCover(
        path: Operations.voteSubjectCover.Input.Path,
        headers: Operations.voteSubjectCover.Input.Headers = .init()
    ) async throws -> Operations.voteSubjectCover.Output {
        try await voteSubjectCover(Operations.voteSubjectCover.Input(
            path: path,
            headers: headers
        ))
    }
    /// 撤消条目封面投票
    ///
    /// 需要 `subjectWikiEdit` 权限
    ///
    /// - Remark: HTTP `DELETE /p1/wiki/subjects/{subjectID}/covers/{imageID}/vote`.
    /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/covers/{imageID}/vote/delete(unvoteSubjectCover)`.
    internal func unvoteSubjectCover(
        path: Operations.unvoteSubjectCover.Input.Path,
        headers: Operations.unvoteSubjectCover.Input.Headers = .init()
    ) async throws -> Operations.unvoteSubjectCover.Output {
        try await unvoteSubjectCover(Operations.unvoteSubjectCover.Input(
            path: path,
            headers: headers
        ))
    }
    /// 获取当前的 wiki 信息
    ///
    /// - Remark: HTTP `GET /p1/wiki/subjects/{subjectID}/history-summary`.
    /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/history-summary/get(subjectEditHistorySummary)`.
    internal func subjectEditHistorySummary(
        path: Operations.subjectEditHistorySummary.Input.Path,
        headers: Operations.subjectEditHistorySummary.Input.Headers = .init()
    ) async throws -> Operations.subjectEditHistorySummary.Output {
        try await subjectEditHistorySummary(Operations.subjectEditHistorySummary.Input(
            path: path,
            headers: headers
        ))
    }
    /// - Remark: HTTP `POST /p1/wiki/unlock/subjects`.
    /// - Remark: Generated from `#/paths//p1/wiki/unlock/subjects/post(unlockSubject)`.
    internal func unlockSubject(
        headers: Operations.unlockSubject.Input.Headers = .init(),
        body: Operations.unlockSubject.Input.Body
    ) async throws -> Operations.unlockSubject.Output {
        try await unlockSubject(Operations.unlockSubject.Input(
            headers: headers,
            body: body
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
internal enum Servers {}

/// Types generated from the components section of the OpenAPI document.
internal enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    internal enum Schemas {
        /// - Remark: Generated from `#/components/schemas/Avatar`.
        internal struct Avatar: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Avatar/large`.
            internal var large: Swift.String
            /// - Remark: Generated from `#/components/schemas/Avatar/medium`.
            internal var medium: Swift.String
            /// - Remark: Generated from `#/components/schemas/Avatar/small`.
            internal var small: Swift.String
            /// Creates a new `Avatar`.
            ///
            /// - Parameters:
            ///   - large:
            ///   - medium:
            ///   - small:
            internal init(
                large: Swift.String,
                medium: Swift.String,
                small: Swift.String
            ) {
                self.large = large
                self.medium = medium
                self.small = small
            }
            internal enum CodingKeys: String, CodingKey {
                case large
                case medium
                case small
            }
        }
        /// - Remark: Generated from `#/components/schemas/BaseEpisodeComment`.
        internal struct BaseEpisodeComment: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BaseEpisodeComment/content`.
            internal var content: Swift.String
            /// - Remark: Generated from `#/components/schemas/BaseEpisodeComment/createdAt`.
            internal var createdAt: Swift.Int
            /// - Remark: Generated from `#/components/schemas/BaseEpisodeComment/creatorID`.
            internal var creatorID: Swift.Int
            /// - Remark: Generated from `#/components/schemas/BaseEpisodeComment/epID`.
            internal var epID: Swift.Int
            /// - Remark: Generated from `#/components/schemas/BaseEpisodeComment/id`.
            internal var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/BaseEpisodeComment/relatedID`.
            internal var relatedID: Swift.Int
            /// - Remark: Generated from `#/components/schemas/BaseEpisodeComment/state`.
            internal var state: Swift.Int
            /// - Remark: Generated from `#/components/schemas/BaseEpisodeComment/user`.
            internal struct userPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BaseEpisodeComment/user/value1`.
                internal struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/BaseEpisodeComment/user/value1/avatar`.
                    internal struct avatarPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/BaseEpisodeComment/user/value1/avatar/large`.
                        internal var large: Swift.String
                        /// - Remark: Generated from `#/components/schemas/BaseEpisodeComment/user/value1/avatar/medium`.
                        internal var medium: Swift.String
                        /// - Remark: Generated from `#/components/schemas/BaseEpisodeComment/user/value1/avatar/small`.
                        internal var small: Swift.String
                        /// Creates a new `avatarPayload`.
                        ///
                        /// - Parameters:
                        ///   - large:
                        ///   - medium:
                        ///   - small:
                        internal init(
                            large: Swift.String,
                            medium: Swift.String,
                            small: Swift.String
                        ) {
                            self.large = large
                            self.medium = medium
                            self.small = small
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case large
                            case medium
                            case small
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/BaseEpisodeComment/user/value1/avatar`.
                    internal var avatar: Components.Schemas.BaseEpisodeComment.userPayload.Value1Payload.avatarPayload
                    /// - Remark: Generated from `#/components/schemas/BaseEpisodeComment/user/value1/id`.
                    internal var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/BaseEpisodeComment/user/value1/nickname`.
                    internal var nickname: Swift.String
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - avatar:
                    ///   - id:
                    ///   - nickname:
                    internal init(
                        avatar: Components.Schemas.BaseEpisodeComment.userPayload.Value1Payload.avatarPayload,
                        id: Swift.Int,
                        nickname: Swift.String
                    ) {
                        self.avatar = avatar
                        self.id = id
                        self.nickname = nickname
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case avatar
                        case id
                        case nickname
                    }
                }
                /// - Remark: Generated from `#/components/schemas/BaseEpisodeComment/user/value1`.
                internal var value1: Components.Schemas.BaseEpisodeComment.userPayload.Value1Payload?
                /// - Remark: Generated from `#/components/schemas/BaseEpisodeComment/user/value2`.
                internal var value2: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `userPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                internal init(
                    value1: Components.Schemas.BaseEpisodeComment.userPayload.Value1Payload? = nil,
                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                internal init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                internal func encode(to encoder: any Encoder) throws {
                    try value1?.encode(to: encoder)
                    try value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseEpisodeComment/user`.
            internal var user: Components.Schemas.BaseEpisodeComment.userPayload
            /// Creates a new `BaseEpisodeComment`.
            ///
            /// - Parameters:
            ///   - content:
            ///   - createdAt:
            ///   - creatorID:
            ///   - epID:
            ///   - id:
            ///   - relatedID:
            ///   - state:
            ///   - user:
            internal init(
                content: Swift.String,
                createdAt: Swift.Int,
                creatorID: Swift.Int,
                epID: Swift.Int,
                id: Swift.Int,
                relatedID: Swift.Int,
                state: Swift.Int,
                user: Components.Schemas.BaseEpisodeComment.userPayload
            ) {
                self.content = content
                self.createdAt = createdAt
                self.creatorID = creatorID
                self.epID = epID
                self.id = id
                self.relatedID = relatedID
                self.state = state
                self.user = user
            }
            internal enum CodingKeys: String, CodingKey {
                case content
                case createdAt
                case creatorID
                case epID
                case id
                case relatedID
                case state
                case user
            }
        }
        /// - Remark: Generated from `#/components/schemas/BasicReply`.
        internal struct BasicReply: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BasicReply/createdAt`.
            internal var createdAt: Swift.Int
            /// - Remark: Generated from `#/components/schemas/BasicReply/creator`.
            internal var creator: Components.Schemas.User
            /// - Remark: Generated from `#/components/schemas/BasicReply/id`.
            internal var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/BasicReply/state`.
            internal var state: Swift.Int
            /// - Remark: Generated from `#/components/schemas/BasicReply/text`.
            internal var text: Swift.String
            /// Creates a new `BasicReply`.
            ///
            /// - Parameters:
            ///   - createdAt:
            ///   - creator:
            ///   - id:
            ///   - state:
            ///   - text:
            internal init(
                createdAt: Swift.Int,
                creator: Components.Schemas.User,
                id: Swift.Int,
                state: Swift.Int,
                text: Swift.String
            ) {
                self.createdAt = createdAt
                self.creator = creator
                self.id = id
                self.state = state
                self.text = text
            }
            internal enum CodingKeys: String, CodingKey {
                case createdAt
                case creator
                case id
                case state
                case text
            }
        }
        /// - Remark: Generated from `#/components/schemas/CurrentUser`.
        internal struct CurrentUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CurrentUser/value1`.
            internal struct Value1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CurrentUser/value1/avatar`.
                internal struct avatarPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CurrentUser/value1/avatar/large`.
                    internal var large: Swift.String
                    /// - Remark: Generated from `#/components/schemas/CurrentUser/value1/avatar/medium`.
                    internal var medium: Swift.String
                    /// - Remark: Generated from `#/components/schemas/CurrentUser/value1/avatar/small`.
                    internal var small: Swift.String
                    /// Creates a new `avatarPayload`.
                    ///
                    /// - Parameters:
                    ///   - large:
                    ///   - medium:
                    ///   - small:
                    internal init(
                        large: Swift.String,
                        medium: Swift.String,
                        small: Swift.String
                    ) {
                        self.large = large
                        self.medium = medium
                        self.small = small
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case large
                        case medium
                        case small
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CurrentUser/value1/avatar`.
                internal var avatar: Components.Schemas.CurrentUser.Value1Payload.avatarPayload
                /// - Remark: Generated from `#/components/schemas/CurrentUser/value1/id`.
                internal var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/CurrentUser/value1/nickname`.
                internal var nickname: Swift.String
                /// - Remark: Generated from `#/components/schemas/CurrentUser/value1/sign`.
                internal var sign: Swift.String
                /// - Remark: Generated from `#/components/schemas/CurrentUser/value1/user_group`.
                internal var user_group: Swift.Int
                /// - Remark: Generated from `#/components/schemas/CurrentUser/value1/username`.
                internal var username: Swift.String
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - avatar:
                ///   - id:
                ///   - nickname:
                ///   - sign:
                ///   - user_group:
                ///   - username:
                internal init(
                    avatar: Components.Schemas.CurrentUser.Value1Payload.avatarPayload,
                    id: Swift.Int,
                    nickname: Swift.String,
                    sign: Swift.String,
                    user_group: Swift.Int,
                    username: Swift.String
                ) {
                    self.avatar = avatar
                    self.id = id
                    self.nickname = nickname
                    self.sign = sign
                    self.user_group = user_group
                    self.username = username
                }
                internal enum CodingKeys: String, CodingKey {
                    case avatar
                    case id
                    case nickname
                    case sign
                    case user_group
                    case username
                }
            }
            /// - Remark: Generated from `#/components/schemas/CurrentUser/value1`.
            internal var value1: Components.Schemas.CurrentUser.Value1Payload
            /// - Remark: Generated from `#/components/schemas/CurrentUser/value2`.
            internal struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CurrentUser/value2/permission`.
                internal struct permissionPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CurrentUser/value2/permission/subjectWikiEdit`.
                    internal var subjectWikiEdit: Swift.Bool
                    /// Creates a new `permissionPayload`.
                    ///
                    /// - Parameters:
                    ///   - subjectWikiEdit:
                    internal init(subjectWikiEdit: Swift.Bool) {
                        self.subjectWikiEdit = subjectWikiEdit
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case subjectWikiEdit
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CurrentUser/value2/permission`.
                internal var permission: Components.Schemas.CurrentUser.Value2Payload.permissionPayload
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - permission:
                internal init(permission: Components.Schemas.CurrentUser.Value2Payload.permissionPayload) {
                    self.permission = permission
                }
                internal enum CodingKeys: String, CodingKey {
                    case permission
                }
            }
            /// - Remark: Generated from `#/components/schemas/CurrentUser/value2`.
            internal var value2: Components.Schemas.CurrentUser.Value2Payload
            /// Creates a new `CurrentUser`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            internal init(
                value1: Components.Schemas.CurrentUser.Value1Payload,
                value2: Components.Schemas.CurrentUser.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            internal init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            internal func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/EpisodeComments`.
        internal struct EpisodeComments: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/EpisodeComments/value1`.
            internal struct Value1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/EpisodeComments/value1/content`.
                internal var content: Swift.String
                /// - Remark: Generated from `#/components/schemas/EpisodeComments/value1/createdAt`.
                internal var createdAt: Swift.Int
                /// - Remark: Generated from `#/components/schemas/EpisodeComments/value1/creatorID`.
                internal var creatorID: Swift.Int
                /// - Remark: Generated from `#/components/schemas/EpisodeComments/value1/epID`.
                internal var epID: Swift.Int
                /// - Remark: Generated from `#/components/schemas/EpisodeComments/value1/id`.
                internal var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/EpisodeComments/value1/relatedID`.
                internal var relatedID: Swift.Int
                /// - Remark: Generated from `#/components/schemas/EpisodeComments/value1/state`.
                internal var state: Swift.Int
                /// - Remark: Generated from `#/components/schemas/EpisodeComments/value1/user`.
                internal struct userPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/EpisodeComments/value1/user/value1`.
                    internal struct Value1Payload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/EpisodeComments/value1/user/value1/avatar`.
                        internal struct avatarPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/EpisodeComments/value1/user/value1/avatar/large`.
                            internal var large: Swift.String
                            /// - Remark: Generated from `#/components/schemas/EpisodeComments/value1/user/value1/avatar/medium`.
                            internal var medium: Swift.String
                            /// - Remark: Generated from `#/components/schemas/EpisodeComments/value1/user/value1/avatar/small`.
                            internal var small: Swift.String
                            /// Creates a new `avatarPayload`.
                            ///
                            /// - Parameters:
                            ///   - large:
                            ///   - medium:
                            ///   - small:
                            internal init(
                                large: Swift.String,
                                medium: Swift.String,
                                small: Swift.String
                            ) {
                                self.large = large
                                self.medium = medium
                                self.small = small
                            }
                            internal enum CodingKeys: String, CodingKey {
                                case large
                                case medium
                                case small
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/EpisodeComments/value1/user/value1/avatar`.
                        internal var avatar: Components.Schemas.EpisodeComments.Value1Payload.userPayload.Value1Payload.avatarPayload
                        /// - Remark: Generated from `#/components/schemas/EpisodeComments/value1/user/value1/id`.
                        internal var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/EpisodeComments/value1/user/value1/nickname`.
                        internal var nickname: Swift.String
                        /// Creates a new `Value1Payload`.
                        ///
                        /// - Parameters:
                        ///   - avatar:
                        ///   - id:
                        ///   - nickname:
                        internal init(
                            avatar: Components.Schemas.EpisodeComments.Value1Payload.userPayload.Value1Payload.avatarPayload,
                            id: Swift.Int,
                            nickname: Swift.String
                        ) {
                            self.avatar = avatar
                            self.id = id
                            self.nickname = nickname
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case avatar
                            case id
                            case nickname
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/EpisodeComments/value1/user/value1`.
                    internal var value1: Components.Schemas.EpisodeComments.Value1Payload.userPayload.Value1Payload?
                    /// - Remark: Generated from `#/components/schemas/EpisodeComments/value1/user/value2`.
                    internal var value2: OpenAPIRuntime.OpenAPIValueContainer?
                    /// Creates a new `userPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    internal init(
                        value1: Components.Schemas.EpisodeComments.Value1Payload.userPayload.Value1Payload? = nil,
                        value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    internal init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            value1 = try .init(from: decoder)
                        } catch {
                            errors.append(error)
                        }
                        do {
                            value2 = try .init(from: decoder)
                        } catch {
                            errors.append(error)
                        }
                        try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                            [
                                value1,
                                value2
                            ],
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    internal func encode(to encoder: any Encoder) throws {
                        try value1?.encode(to: encoder)
                        try value2?.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/components/schemas/EpisodeComments/value1/user`.
                internal var user: Components.Schemas.EpisodeComments.Value1Payload.userPayload
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - content:
                ///   - createdAt:
                ///   - creatorID:
                ///   - epID:
                ///   - id:
                ///   - relatedID:
                ///   - state:
                ///   - user:
                internal init(
                    content: Swift.String,
                    createdAt: Swift.Int,
                    creatorID: Swift.Int,
                    epID: Swift.Int,
                    id: Swift.Int,
                    relatedID: Swift.Int,
                    state: Swift.Int,
                    user: Components.Schemas.EpisodeComments.Value1Payload.userPayload
                ) {
                    self.content = content
                    self.createdAt = createdAt
                    self.creatorID = creatorID
                    self.epID = epID
                    self.id = id
                    self.relatedID = relatedID
                    self.state = state
                    self.user = user
                }
                internal enum CodingKeys: String, CodingKey {
                    case content
                    case createdAt
                    case creatorID
                    case epID
                    case id
                    case relatedID
                    case state
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/EpisodeComments/value1`.
            internal var value1: Components.Schemas.EpisodeComments.Value1Payload
            /// - Remark: Generated from `#/components/schemas/EpisodeComments/value2`.
            internal struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/EpisodeComments/value2/replies`.
                internal var replies: [Components.Schemas.BaseEpisodeComment]
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - replies:
                internal init(replies: [Components.Schemas.BaseEpisodeComment]) {
                    self.replies = replies
                }
                internal enum CodingKeys: String, CodingKey {
                    case replies
                }
            }
            /// - Remark: Generated from `#/components/schemas/EpisodeComments/value2`.
            internal var value2: Components.Schemas.EpisodeComments.Value2Payload
            /// Creates a new `EpisodeComments`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            internal init(
                value1: Components.Schemas.EpisodeComments.Value1Payload,
                value2: Components.Schemas.EpisodeComments.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            internal init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            internal func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/EpisodeWikiInfo`.
        internal struct EpisodeWikiInfo: Codable, Hashable, Sendable {
            /// YYYY-MM-DD
            ///
            /// - Remark: Generated from `#/components/schemas/EpisodeWikiInfo/date`.
            internal var date: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EpisodeWikiInfo/duration`.
            internal var duration: Swift.String
            /// - Remark: Generated from `#/components/schemas/EpisodeWikiInfo/ep`.
            internal var ep: Swift.Double
            /// - Remark: Generated from `#/components/schemas/EpisodeWikiInfo/id`.
            internal var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/EpisodeWikiInfo/name`.
            internal var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/EpisodeWikiInfo/nameCN`.
            internal var nameCN: Swift.String
            /// - Remark: Generated from `#/components/schemas/EpisodeWikiInfo/subjectID`.
            internal var subjectID: Swift.Int
            /// - Remark: Generated from `#/components/schemas/EpisodeWikiInfo/summary`.
            internal var summary: Swift.String
            /// - Remark: Generated from `#/components/schemas/EpisodeWikiInfo/type`.
            internal struct _typePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/EpisodeWikiInfo/type/value1`.
                internal var value1: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/EpisodeWikiInfo/type/value2`.
                internal var value2: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/EpisodeWikiInfo/type/value3`.
                internal var value3: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/EpisodeWikiInfo/type/value4`.
                internal var value4: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/EpisodeWikiInfo/type/value5`.
                internal var value5: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/EpisodeWikiInfo/type/value6`.
                internal var value6: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/EpisodeWikiInfo/type/value7`.
                internal var value7: Swift.Double?
                /// Creates a new `_typePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                ///   - value3:
                ///   - value4:
                ///   - value5:
                ///   - value6:
                ///   - value7:
                internal init(
                    value1: Swift.Double? = nil,
                    value2: Swift.Double? = nil,
                    value3: Swift.Double? = nil,
                    value4: Swift.Double? = nil,
                    value5: Swift.Double? = nil,
                    value6: Swift.Double? = nil,
                    value7: Swift.Double? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                    self.value3 = value3
                    self.value4 = value4
                    self.value5 = value5
                    self.value6 = value6
                    self.value7 = value7
                }
                internal init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value3 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value4 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value5 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value6 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value7 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2,
                            value3,
                            value4,
                            value5,
                            value6,
                            value7
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        value1,
                        value2,
                        value3,
                        value4,
                        value5,
                        value6,
                        value7
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/EpisodeWikiInfo/type`.
            internal var _type: Components.Schemas.EpisodeWikiInfo._typePayload
            /// Creates a new `EpisodeWikiInfo`.
            ///
            /// - Parameters:
            ///   - date: YYYY-MM-DD
            ///   - duration:
            ///   - ep:
            ///   - id:
            ///   - name:
            ///   - nameCN:
            ///   - subjectID:
            ///   - summary:
            ///   - _type:
            internal init(
                date: Swift.String? = nil,
                duration: Swift.String,
                ep: Swift.Double,
                id: Swift.Int,
                name: Swift.String,
                nameCN: Swift.String,
                subjectID: Swift.Int,
                summary: Swift.String,
                _type: Components.Schemas.EpisodeWikiInfo._typePayload
            ) {
                self.date = date
                self.duration = duration
                self.ep = ep
                self.id = id
                self.name = name
                self.nameCN = nameCN
                self.subjectID = subjectID
                self.summary = summary
                self._type = _type
            }
            internal enum CodingKeys: String, CodingKey {
                case date
                case duration
                case ep
                case id
                case name
                case nameCN
                case subjectID
                case summary
                case _type = "type"
            }
        }
        /// default error response type
        ///
        /// - Remark: Generated from `#/components/schemas/ErrorResponse`.
        internal struct ErrorResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/code`.
            internal var code: Swift.String
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/error`.
            internal var error: Swift.String
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/message`.
            internal var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/statusCode`.
            internal var statusCode: Swift.Int
            /// Creates a new `ErrorResponse`.
            ///
            /// - Parameters:
            ///   - code:
            ///   - error:
            ///   - message:
            ///   - statusCode:
            internal init(
                code: Swift.String,
                error: Swift.String,
                message: Swift.String,
                statusCode: Swift.Int
            ) {
                self.code = code
                self.error = error
                self.message = message
                self.statusCode = statusCode
            }
            internal enum CodingKeys: String, CodingKey {
                case code
                case error
                case message
                case statusCode
            }
        }
        /// - Remark: Generated from `#/components/schemas/Group`.
        internal struct Group: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Group/createdAt`.
            internal var createdAt: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Group/description`.
            internal var description: Swift.String
            /// - Remark: Generated from `#/components/schemas/Group/icon`.
            internal var icon: Swift.String
            /// - Remark: Generated from `#/components/schemas/Group/id`.
            internal var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Group/name`.
            internal var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/Group/nsfw`.
            internal var nsfw: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Group/title`.
            internal var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/Group/totalMembers`.
            internal var totalMembers: Swift.Int
            /// Creates a new `Group`.
            ///
            /// - Parameters:
            ///   - createdAt:
            ///   - description:
            ///   - icon:
            ///   - id:
            ///   - name:
            ///   - nsfw:
            ///   - title:
            ///   - totalMembers:
            internal init(
                createdAt: Swift.Int,
                description: Swift.String,
                icon: Swift.String,
                id: Swift.Int,
                name: Swift.String,
                nsfw: Swift.Bool,
                title: Swift.String,
                totalMembers: Swift.Int
            ) {
                self.createdAt = createdAt
                self.description = description
                self.icon = icon
                self.id = id
                self.name = name
                self.nsfw = nsfw
                self.title = title
                self.totalMembers = totalMembers
            }
            internal enum CodingKeys: String, CodingKey {
                case createdAt
                case description
                case icon
                case id
                case name
                case nsfw
                case title
                case totalMembers
            }
        }
        /// - Remark: Generated from `#/components/schemas/GroupMember`.
        internal struct GroupMember: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GroupMember/avatar`.
            internal struct avatarPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/GroupMember/avatar/large`.
                internal var large: Swift.String
                /// - Remark: Generated from `#/components/schemas/GroupMember/avatar/medium`.
                internal var medium: Swift.String
                /// - Remark: Generated from `#/components/schemas/GroupMember/avatar/small`.
                internal var small: Swift.String
                /// Creates a new `avatarPayload`.
                ///
                /// - Parameters:
                ///   - large:
                ///   - medium:
                ///   - small:
                internal init(
                    large: Swift.String,
                    medium: Swift.String,
                    small: Swift.String
                ) {
                    self.large = large
                    self.medium = medium
                    self.small = small
                }
                internal enum CodingKeys: String, CodingKey {
                    case large
                    case medium
                    case small
                }
            }
            /// - Remark: Generated from `#/components/schemas/GroupMember/avatar`.
            internal var avatar: Components.Schemas.GroupMember.avatarPayload
            /// - Remark: Generated from `#/components/schemas/GroupMember/id`.
            internal var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/GroupMember/joinedAt`.
            internal var joinedAt: Swift.Int
            /// - Remark: Generated from `#/components/schemas/GroupMember/nickname`.
            internal var nickname: Swift.String
            /// - Remark: Generated from `#/components/schemas/GroupMember/username`.
            internal var username: Swift.String
            /// Creates a new `GroupMember`.
            ///
            /// - Parameters:
            ///   - avatar:
            ///   - id:
            ///   - joinedAt:
            ///   - nickname:
            ///   - username:
            internal init(
                avatar: Components.Schemas.GroupMember.avatarPayload,
                id: Swift.Int,
                joinedAt: Swift.Int,
                nickname: Swift.String,
                username: Swift.String
            ) {
                self.avatar = avatar
                self.id = id
                self.joinedAt = joinedAt
                self.nickname = nickname
                self.username = username
            }
            internal enum CodingKeys: String, CodingKey {
                case avatar
                case id
                case joinedAt
                case nickname
                case username
            }
        }
        /// - Remark: Generated from `#/components/schemas/GroupProfile`.
        internal struct GroupProfile: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GroupProfile/group`.
            internal var group: Components.Schemas.Group
            /// 是否已经加入小组
            ///
            /// - Remark: Generated from `#/components/schemas/GroupProfile/inGroup`.
            internal var inGroup: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/GroupProfile/recentAddedMembers`.
            internal var recentAddedMembers: [Components.Schemas.GroupMember]
            /// - Remark: Generated from `#/components/schemas/GroupProfile/topics`.
            internal var topics: [Components.Schemas.Topic]
            /// - Remark: Generated from `#/components/schemas/GroupProfile/totalTopics`.
            internal var totalTopics: Swift.Int
            /// Creates a new `GroupProfile`.
            ///
            /// - Parameters:
            ///   - group:
            ///   - inGroup: 是否已经加入小组
            ///   - recentAddedMembers:
            ///   - topics:
            ///   - totalTopics:
            internal init(
                group: Components.Schemas.Group,
                inGroup: Swift.Bool,
                recentAddedMembers: [Components.Schemas.GroupMember],
                topics: [Components.Schemas.Topic],
                totalTopics: Swift.Int
            ) {
                self.group = group
                self.inGroup = inGroup
                self.recentAddedMembers = recentAddedMembers
                self.topics = topics
                self.totalTopics = totalTopics
            }
            internal enum CodingKeys: String, CodingKey {
                case group
                case inGroup
                case recentAddedMembers
                case topics
                case totalTopics
            }
        }
        /// - Remark: Generated from `#/components/schemas/GroupReply`.
        internal struct GroupReply: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GroupReply/createdAt`.
            internal var createdAt: Swift.Int
            /// - Remark: Generated from `#/components/schemas/GroupReply/creator`.
            internal var creator: Components.Schemas.User
            /// - Remark: Generated from `#/components/schemas/GroupReply/id`.
            internal var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/GroupReply/state`.
            internal var state: Swift.Int
            /// - Remark: Generated from `#/components/schemas/GroupReply/text`.
            internal var text: Swift.String
            /// - Remark: Generated from `#/components/schemas/GroupReply/topicID`.
            internal var topicID: Swift.Int
            /// - Remark: Generated from `#/components/schemas/GroupReply/topicTitle`.
            internal var topicTitle: Swift.String
            /// Creates a new `GroupReply`.
            ///
            /// - Parameters:
            ///   - createdAt:
            ///   - creator:
            ///   - id:
            ///   - state:
            ///   - text:
            ///   - topicID:
            ///   - topicTitle:
            internal init(
                createdAt: Swift.Int,
                creator: Components.Schemas.User,
                id: Swift.Int,
                state: Swift.Int,
                text: Swift.String,
                topicID: Swift.Int,
                topicTitle: Swift.String
            ) {
                self.createdAt = createdAt
                self.creator = creator
                self.id = id
                self.state = state
                self.text = text
                self.topicID = topicID
                self.topicTitle = topicTitle
            }
            internal enum CodingKeys: String, CodingKey {
                case createdAt
                case creator
                case id
                case state
                case text
                case topicID
                case topicTitle
            }
        }
        /// - Remark: Generated from `#/components/schemas/HistorySummary`.
        internal struct HistorySummary: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/HistorySummary/commitMessage`.
            internal var commitMessage: Swift.String
            /// unix timestamp seconds
            ///
            /// - Remark: Generated from `#/components/schemas/HistorySummary/createdAt`.
            internal var createdAt: Swift.Int
            /// - Remark: Generated from `#/components/schemas/HistorySummary/creator`.
            internal struct creatorPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/HistorySummary/creator/username`.
                internal var username: Swift.String
                /// Creates a new `creatorPayload`.
                ///
                /// - Parameters:
                ///   - username:
                internal init(username: Swift.String) {
                    self.username = username
                }
                internal enum CodingKeys: String, CodingKey {
                    case username
                }
            }
            /// - Remark: Generated from `#/components/schemas/HistorySummary/creator`.
            internal var creator: Components.Schemas.HistorySummary.creatorPayload
            /// 修改类型。`1` 正常修改， `11` 合并，`103` 锁定/解锁 `104` 未知
            ///
            /// - Remark: Generated from `#/components/schemas/HistorySummary/type`.
            internal var _type: Swift.Int
            /// Creates a new `HistorySummary`.
            ///
            /// - Parameters:
            ///   - commitMessage:
            ///   - createdAt: unix timestamp seconds
            ///   - creator:
            ///   - _type: 修改类型。`1` 正常修改， `11` 合并，`103` 锁定/解锁 `104` 未知
            internal init(
                commitMessage: Swift.String,
                createdAt: Swift.Int,
                creator: Components.Schemas.HistorySummary.creatorPayload,
                _type: Swift.Int
            ) {
                self.commitMessage = commitMessage
                self.createdAt = createdAt
                self.creator = creator
                self._type = _type
            }
            internal enum CodingKeys: String, CodingKey {
                case commitMessage
                case createdAt
                case creator
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/LoginRequestBody`.
        internal struct LoginRequestBody: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LoginRequestBody/cf-turnstile-response`.
            internal var cf_hyphen_turnstile_hyphen_response: Swift.String
            /// - Remark: Generated from `#/components/schemas/LoginRequestBody/email`.
            internal var email: Swift.String
            /// - Remark: Generated from `#/components/schemas/LoginRequestBody/password`.
            internal var password: Swift.String
            /// Creates a new `LoginRequestBody`.
            ///
            /// - Parameters:
            ///   - cf_hyphen_turnstile_hyphen_response:
            ///   - email:
            ///   - password:
            internal init(
                cf_hyphen_turnstile_hyphen_response: Swift.String,
                email: Swift.String,
                password: Swift.String
            ) {
                self.cf_hyphen_turnstile_hyphen_response = cf_hyphen_turnstile_hyphen_response
                self.email = email
                self.password = password
            }
            internal enum CodingKeys: String, CodingKey {
                case cf_hyphen_turnstile_hyphen_response = "cf-turnstile-response"
                case email
                case password
            }
        }
        /// - Remark: Generated from `#/components/schemas/Notice`.
        internal struct Notice: Codable, Hashable, Sendable {
            /// unix timestamp in seconds
            ///
            /// - Remark: Generated from `#/components/schemas/Notice/createdAt`.
            internal var createdAt: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Notice/id`.
            internal var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Notice/postID`.
            internal var postID: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Notice/sender`.
            internal struct senderPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Notice/sender/avatar`.
                internal struct avatarPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/Notice/sender/avatar/large`.
                    internal var large: Swift.String
                    /// - Remark: Generated from `#/components/schemas/Notice/sender/avatar/medium`.
                    internal var medium: Swift.String
                    /// - Remark: Generated from `#/components/schemas/Notice/sender/avatar/small`.
                    internal var small: Swift.String
                    /// Creates a new `avatarPayload`.
                    ///
                    /// - Parameters:
                    ///   - large:
                    ///   - medium:
                    ///   - small:
                    internal init(
                        large: Swift.String,
                        medium: Swift.String,
                        small: Swift.String
                    ) {
                        self.large = large
                        self.medium = medium
                        self.small = small
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case large
                        case medium
                        case small
                    }
                }
                /// - Remark: Generated from `#/components/schemas/Notice/sender/avatar`.
                internal var avatar: Components.Schemas.Notice.senderPayload.avatarPayload
                /// - Remark: Generated from `#/components/schemas/Notice/sender/id`.
                internal var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/Notice/sender/nickname`.
                internal var nickname: Swift.String
                /// - Remark: Generated from `#/components/schemas/Notice/sender/sign`.
                internal var sign: Swift.String
                /// - Remark: Generated from `#/components/schemas/Notice/sender/user_group`.
                internal var user_group: Swift.Int
                /// - Remark: Generated from `#/components/schemas/Notice/sender/username`.
                internal var username: Swift.String
                /// Creates a new `senderPayload`.
                ///
                /// - Parameters:
                ///   - avatar:
                ///   - id:
                ///   - nickname:
                ///   - sign:
                ///   - user_group:
                ///   - username:
                internal init(
                    avatar: Components.Schemas.Notice.senderPayload.avatarPayload,
                    id: Swift.Int,
                    nickname: Swift.String,
                    sign: Swift.String,
                    user_group: Swift.Int,
                    username: Swift.String
                ) {
                    self.avatar = avatar
                    self.id = id
                    self.nickname = nickname
                    self.sign = sign
                    self.user_group = user_group
                    self.username = username
                }
                internal enum CodingKeys: String, CodingKey {
                    case avatar
                    case id
                    case nickname
                    case sign
                    case user_group
                    case username
                }
            }
            /// - Remark: Generated from `#/components/schemas/Notice/sender`.
            internal var sender: Components.Schemas.Notice.senderPayload
            /// - Remark: Generated from `#/components/schemas/Notice/title`.
            internal var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/Notice/topicID`.
            internal var topicID: Swift.Int
            /// 查看 `./lib/notify.ts` _settings
            ///
            /// - Remark: Generated from `#/components/schemas/Notice/type`.
            internal var _type: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Notice/unread`.
            internal var unread: Swift.Bool
            /// Creates a new `Notice`.
            ///
            /// - Parameters:
            ///   - createdAt: unix timestamp in seconds
            ///   - id:
            ///   - postID:
            ///   - sender:
            ///   - title:
            ///   - topicID:
            ///   - _type: 查看 `./lib/notify.ts` _settings
            ///   - unread:
            internal init(
                createdAt: Swift.Int,
                id: Swift.Int,
                postID: Swift.Int,
                sender: Components.Schemas.Notice.senderPayload,
                title: Swift.String,
                topicID: Swift.Int,
                _type: Swift.Int,
                unread: Swift.Bool
            ) {
                self.createdAt = createdAt
                self.id = id
                self.postID = postID
                self.sender = sender
                self.title = title
                self.topicID = topicID
                self._type = _type
                self.unread = unread
            }
            internal enum CodingKeys: String, CodingKey {
                case createdAt
                case id
                case postID
                case sender
                case title
                case topicID
                case _type = "type"
                case unread
            }
        }
        /// - Remark: Generated from `#/components/schemas/Permission`.
        internal struct Permission: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Permission/subjectWikiEdit`.
            internal var subjectWikiEdit: Swift.Bool
            /// Creates a new `Permission`.
            ///
            /// - Parameters:
            ///   - subjectWikiEdit:
            internal init(subjectWikiEdit: Swift.Bool) {
                self.subjectWikiEdit = subjectWikiEdit
            }
            internal enum CodingKeys: String, CodingKey {
                case subjectWikiEdit
            }
        }
        /// - Remark: Generated from `#/components/schemas/Reaction`.
        internal struct Reaction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Reaction/selected`.
            internal var selected: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Reaction/total`.
            internal var total: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Reaction/value`.
            internal var value: Swift.Int
            /// Creates a new `Reaction`.
            ///
            /// - Parameters:
            ///   - selected:
            ///   - total:
            ///   - value:
            internal init(
                selected: Swift.Bool,
                total: Swift.Int,
                value: Swift.Int
            ) {
                self.selected = selected
                self.total = total
                self.value = value
            }
            internal enum CodingKeys: String, CodingKey {
                case selected
                case total
                case value
            }
        }
        /// - Remark: Generated from `#/components/schemas/RecentWikiChange`.
        internal struct RecentWikiChange: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RecentWikiChange/personsPayload`.
            internal struct personsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RecentWikiChange/personsPayload/createdAt`.
                internal var createdAt: Swift.Int
                /// - Remark: Generated from `#/components/schemas/RecentWikiChange/personsPayload/id`.
                internal var id: Swift.Int
                /// Creates a new `personsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - createdAt:
                ///   - id:
                internal init(
                    createdAt: Swift.Int,
                    id: Swift.Int
                ) {
                    self.createdAt = createdAt
                    self.id = id
                }
                internal enum CodingKeys: String, CodingKey {
                    case createdAt
                    case id
                }
            }
            /// - Remark: Generated from `#/components/schemas/RecentWikiChange/persons`.
            internal typealias personsPayload = [Components.Schemas.RecentWikiChange.personsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/RecentWikiChange/persons`.
            internal var persons: Components.Schemas.RecentWikiChange.personsPayload
            /// - Remark: Generated from `#/components/schemas/RecentWikiChange/subjectPayload`.
            internal struct subjectPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RecentWikiChange/subjectPayload/createdAt`.
                internal var createdAt: Swift.Int
                /// - Remark: Generated from `#/components/schemas/RecentWikiChange/subjectPayload/id`.
                internal var id: Swift.Int
                /// Creates a new `subjectPayloadPayload`.
                ///
                /// - Parameters:
                ///   - createdAt:
                ///   - id:
                internal init(
                    createdAt: Swift.Int,
                    id: Swift.Int
                ) {
                    self.createdAt = createdAt
                    self.id = id
                }
                internal enum CodingKeys: String, CodingKey {
                    case createdAt
                    case id
                }
            }
            /// - Remark: Generated from `#/components/schemas/RecentWikiChange/subject`.
            internal typealias subjectPayload = [Components.Schemas.RecentWikiChange.subjectPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/RecentWikiChange/subject`.
            internal var subject: Components.Schemas.RecentWikiChange.subjectPayload
            /// Creates a new `RecentWikiChange`.
            ///
            /// - Parameters:
            ///   - persons:
            ///   - subject:
            internal init(
                persons: Components.Schemas.RecentWikiChange.personsPayload,
                subject: Components.Schemas.RecentWikiChange.subjectPayload
            ) {
                self.persons = persons
                self.subject = subject
            }
            internal enum CodingKeys: String, CodingKey {
                case persons
                case subject
            }
        }
        /// - Remark: Generated from `#/components/schemas/Reply`.
        internal struct Reply: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Reply/createdAt`.
            internal var createdAt: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Reply/creator`.
            internal var creator: Components.Schemas.User
            /// - Remark: Generated from `#/components/schemas/Reply/id`.
            internal var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Reply/isFriend`.
            internal var isFriend: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Reply/reactions`.
            internal var reactions: [Components.Schemas.Reaction]
            /// - Remark: Generated from `#/components/schemas/Reply/replies`.
            internal var replies: [Components.Schemas.SubReply]
            /// - Remark: Generated from `#/components/schemas/Reply/state`.
            internal var state: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Reply/text`.
            internal var text: Swift.String
            /// Creates a new `Reply`.
            ///
            /// - Parameters:
            ///   - createdAt:
            ///   - creator:
            ///   - id:
            ///   - isFriend:
            ///   - reactions:
            ///   - replies:
            ///   - state:
            ///   - text:
            internal init(
                createdAt: Swift.Int,
                creator: Components.Schemas.User,
                id: Swift.Int,
                isFriend: Swift.Bool,
                reactions: [Components.Schemas.Reaction],
                replies: [Components.Schemas.SubReply],
                state: Swift.Int,
                text: Swift.String
            ) {
                self.createdAt = createdAt
                self.creator = creator
                self.id = id
                self.isFriend = isFriend
                self.reactions = reactions
                self.replies = replies
                self.state = state
                self.text = text
            }
            internal enum CodingKeys: String, CodingKey {
                case createdAt
                case creator
                case id
                case isFriend
                case reactions
                case replies
                case state
                case text
            }
        }
        /// - Remark: Generated from `#/components/schemas/SubReply`.
        internal struct SubReply: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SubReply/createdAt`.
            internal var createdAt: Swift.Int
            /// - Remark: Generated from `#/components/schemas/SubReply/creator`.
            internal var creator: Components.Schemas.User
            /// - Remark: Generated from `#/components/schemas/SubReply/id`.
            internal var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/SubReply/isFriend`.
            internal var isFriend: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/SubReply/reactions`.
            internal var reactions: [Components.Schemas.Reaction]
            /// - Remark: Generated from `#/components/schemas/SubReply/state`.
            internal var state: Swift.Int
            /// - Remark: Generated from `#/components/schemas/SubReply/text`.
            internal var text: Swift.String
            /// Creates a new `SubReply`.
            ///
            /// - Parameters:
            ///   - createdAt:
            ///   - creator:
            ///   - id:
            ///   - isFriend:
            ///   - reactions:
            ///   - state:
            ///   - text:
            internal init(
                createdAt: Swift.Int,
                creator: Components.Schemas.User,
                id: Swift.Int,
                isFriend: Swift.Bool,
                reactions: [Components.Schemas.Reaction],
                state: Swift.Int,
                text: Swift.String
            ) {
                self.createdAt = createdAt
                self.creator = creator
                self.id = id
                self.isFriend = isFriend
                self.reactions = reactions
                self.state = state
                self.text = text
            }
            internal enum CodingKeys: String, CodingKey {
                case createdAt
                case creator
                case id
                case isFriend
                case reactions
                case state
                case text
            }
        }
        /// - Remark: Generated from `#/components/schemas/Subject`.
        internal struct Subject: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Subject/date`.
            internal var date: Swift.String
            /// - Remark: Generated from `#/components/schemas/Subject/id`.
            internal var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Subject/image`.
            internal var image: Swift.String
            /// - Remark: Generated from `#/components/schemas/Subject/infobox`.
            internal var infobox: Swift.String
            /// - Remark: Generated from `#/components/schemas/Subject/locked`.
            internal var locked: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Subject/name`.
            internal var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/Subject/nsfw`.
            internal var nsfw: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Subject/platform`.
            internal var platform: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Subject/redirect`.
            internal var redirect: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Subject/summary`.
            internal var summary: Swift.String
            /// - Remark: Generated from `#/components/schemas/Subject/typeID`.
            internal var typeID: Swift.Int
            /// Creates a new `Subject`.
            ///
            /// - Parameters:
            ///   - date:
            ///   - id:
            ///   - image:
            ///   - infobox:
            ///   - locked:
            ///   - name:
            ///   - nsfw:
            ///   - platform:
            ///   - redirect:
            ///   - summary:
            ///   - typeID:
            internal init(
                date: Swift.String,
                id: Swift.Int,
                image: Swift.String,
                infobox: Swift.String,
                locked: Swift.Bool,
                name: Swift.String,
                nsfw: Swift.Bool,
                platform: Swift.Int,
                redirect: Swift.Int,
                summary: Swift.String,
                typeID: Swift.Int
            ) {
                self.date = date
                self.id = id
                self.image = image
                self.infobox = infobox
                self.locked = locked
                self.name = name
                self.nsfw = nsfw
                self.platform = platform
                self.redirect = redirect
                self.summary = summary
                self.typeID = typeID
            }
            internal enum CodingKeys: String, CodingKey {
                case date
                case id
                case image
                case infobox
                case locked
                case name
                case nsfw
                case platform
                case redirect
                case summary
                case typeID
            }
        }
        /// - Remark: Generated from `#/components/schemas/SubjectEdit`.
        internal struct SubjectEdit: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SubjectEdit/date`.
            internal var date: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SubjectEdit/infobox`.
            internal var infobox: Swift.String
            /// - Remark: Generated from `#/components/schemas/SubjectEdit/name`.
            internal var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/SubjectEdit/nsfw`.
            internal var nsfw: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/SubjectEdit/platform`.
            internal var platform: Swift.Int
            /// - Remark: Generated from `#/components/schemas/SubjectEdit/summary`.
            internal var summary: Swift.String
            /// Creates a new `SubjectEdit`.
            ///
            /// - Parameters:
            ///   - date:
            ///   - infobox:
            ///   - name:
            ///   - nsfw:
            ///   - platform:
            ///   - summary:
            internal init(
                date: Swift.String? = nil,
                infobox: Swift.String,
                name: Swift.String,
                nsfw: Swift.Bool,
                platform: Swift.Int,
                summary: Swift.String
            ) {
                self.date = date
                self.infobox = infobox
                self.name = name
                self.nsfw = nsfw
                self.platform = platform
                self.summary = summary
            }
            internal enum CodingKeys: String, CodingKey {
                case date
                case infobox
                case name
                case nsfw
                case platform
                case summary
            }
        }
        /// - Remark: Generated from `#/components/schemas/SubjectInterestComment`.
        internal struct SubjectInterestComment: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SubjectInterestComment/listPayload`.
            internal struct listPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/SubjectInterestComment/listPayload/comment`.
                internal var comment: Swift.String
                /// - Remark: Generated from `#/components/schemas/SubjectInterestComment/listPayload/rate`.
                internal var rate: Swift.Int
                /// - Remark: Generated from `#/components/schemas/SubjectInterestComment/listPayload/updatedAt`.
                internal var updatedAt: Swift.Int
                /// - Remark: Generated from `#/components/schemas/SubjectInterestComment/listPayload/user`.
                internal struct userPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/SubjectInterestComment/listPayload/user/value1`.
                    internal struct Value1Payload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/SubjectInterestComment/listPayload/user/value1/avatar`.
                        internal struct avatarPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/SubjectInterestComment/listPayload/user/value1/avatar/large`.
                            internal var large: Swift.String
                            /// - Remark: Generated from `#/components/schemas/SubjectInterestComment/listPayload/user/value1/avatar/medium`.
                            internal var medium: Swift.String
                            /// - Remark: Generated from `#/components/schemas/SubjectInterestComment/listPayload/user/value1/avatar/small`.
                            internal var small: Swift.String
                            /// Creates a new `avatarPayload`.
                            ///
                            /// - Parameters:
                            ///   - large:
                            ///   - medium:
                            ///   - small:
                            internal init(
                                large: Swift.String,
                                medium: Swift.String,
                                small: Swift.String
                            ) {
                                self.large = large
                                self.medium = medium
                                self.small = small
                            }
                            internal enum CodingKeys: String, CodingKey {
                                case large
                                case medium
                                case small
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/SubjectInterestComment/listPayload/user/value1/avatar`.
                        internal var avatar: Components.Schemas.SubjectInterestComment.listPayloadPayload.userPayload.Value1Payload.avatarPayload
                        /// - Remark: Generated from `#/components/schemas/SubjectInterestComment/listPayload/user/value1/id`.
                        internal var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/SubjectInterestComment/listPayload/user/value1/nickname`.
                        internal var nickname: Swift.String
                        /// Creates a new `Value1Payload`.
                        ///
                        /// - Parameters:
                        ///   - avatar:
                        ///   - id:
                        ///   - nickname:
                        internal init(
                            avatar: Components.Schemas.SubjectInterestComment.listPayloadPayload.userPayload.Value1Payload.avatarPayload,
                            id: Swift.Int,
                            nickname: Swift.String
                        ) {
                            self.avatar = avatar
                            self.id = id
                            self.nickname = nickname
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case avatar
                            case id
                            case nickname
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/SubjectInterestComment/listPayload/user/value1`.
                    internal var value1: Components.Schemas.SubjectInterestComment.listPayloadPayload.userPayload.Value1Payload?
                    /// - Remark: Generated from `#/components/schemas/SubjectInterestComment/listPayload/user/value2`.
                    internal var value2: OpenAPIRuntime.OpenAPIValueContainer?
                    /// Creates a new `userPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    internal init(
                        value1: Components.Schemas.SubjectInterestComment.listPayloadPayload.userPayload.Value1Payload? = nil,
                        value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    internal init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            value1 = try .init(from: decoder)
                        } catch {
                            errors.append(error)
                        }
                        do {
                            value2 = try .init(from: decoder)
                        } catch {
                            errors.append(error)
                        }
                        try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                            [
                                value1,
                                value2
                            ],
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    internal func encode(to encoder: any Encoder) throws {
                        try value1?.encode(to: encoder)
                        try value2?.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/components/schemas/SubjectInterestComment/listPayload/user`.
                internal var user: Components.Schemas.SubjectInterestComment.listPayloadPayload.userPayload
                /// Creates a new `listPayloadPayload`.
                ///
                /// - Parameters:
                ///   - comment:
                ///   - rate:
                ///   - updatedAt:
                ///   - user:
                internal init(
                    comment: Swift.String,
                    rate: Swift.Int,
                    updatedAt: Swift.Int,
                    user: Components.Schemas.SubjectInterestComment.listPayloadPayload.userPayload
                ) {
                    self.comment = comment
                    self.rate = rate
                    self.updatedAt = updatedAt
                    self.user = user
                }
                internal enum CodingKeys: String, CodingKey {
                    case comment
                    case rate
                    case updatedAt
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/SubjectInterestComment/list`.
            internal typealias listPayload = [Components.Schemas.SubjectInterestComment.listPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/SubjectInterestComment/list`.
            internal var list: Components.Schemas.SubjectInterestComment.listPayload
            /// - Remark: Generated from `#/components/schemas/SubjectInterestComment/total`.
            internal var total: Swift.Int
            /// Creates a new `SubjectInterestComment`.
            ///
            /// - Parameters:
            ///   - list:
            ///   - total:
            internal init(
                list: Components.Schemas.SubjectInterestComment.listPayload,
                total: Swift.Int
            ) {
                self.list = list
                self.total = total
            }
            internal enum CodingKeys: String, CodingKey {
                case list
                case total
            }
        }
        /// - Remark: Generated from `#/components/schemas/SubjectNew`.
        internal struct SubjectNew: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SubjectNew/infobox`.
            internal var infobox: Swift.String
            /// - Remark: Generated from `#/components/schemas/SubjectNew/name`.
            internal var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/SubjectNew/nsfw`.
            internal var nsfw: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/SubjectNew/platform`.
            internal var platform: Swift.Int
            /// - Remark: Generated from `#/components/schemas/SubjectNew/summary`.
            internal var summary: Swift.String
            /// - Remark: Generated from `#/components/schemas/SubjectNew/type`.
            internal struct _typePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/SubjectNew/type/value1`.
                internal var value1: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/SubjectNew/type/value2`.
                internal var value2: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/SubjectNew/type/value3`.
                internal var value3: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/SubjectNew/type/value4`.
                internal var value4: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/SubjectNew/type/value5`.
                internal var value5: Swift.Double?
                /// Creates a new `_typePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                ///   - value3:
                ///   - value4:
                ///   - value5:
                internal init(
                    value1: Swift.Double? = nil,
                    value2: Swift.Double? = nil,
                    value3: Swift.Double? = nil,
                    value4: Swift.Double? = nil,
                    value5: Swift.Double? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                    self.value3 = value3
                    self.value4 = value4
                    self.value5 = value5
                }
                internal init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value3 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value4 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value5 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2,
                            value3,
                            value4,
                            value5
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        value1,
                        value2,
                        value3,
                        value4,
                        value5
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/SubjectNew/type`.
            internal var _type: Components.Schemas.SubjectNew._typePayload
            /// Creates a new `SubjectNew`.
            ///
            /// - Parameters:
            ///   - infobox:
            ///   - name:
            ///   - nsfw:
            ///   - platform:
            ///   - summary:
            ///   - _type:
            internal init(
                infobox: Swift.String,
                name: Swift.String,
                nsfw: Swift.Bool,
                platform: Swift.Int,
                summary: Swift.String,
                _type: Components.Schemas.SubjectNew._typePayload
            ) {
                self.infobox = infobox
                self.name = name
                self.nsfw = nsfw
                self.platform = platform
                self.summary = summary
                self._type = _type
            }
            internal enum CodingKeys: String, CodingKey {
                case infobox
                case name
                case nsfw
                case platform
                case summary
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/SubjectType`.
        internal struct SubjectType: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SubjectType/value1`.
            internal var value1: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/SubjectType/value2`.
            internal var value2: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/SubjectType/value3`.
            internal var value3: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/SubjectType/value4`.
            internal var value4: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/SubjectType/value5`.
            internal var value5: Swift.Double?
            /// Creates a new `SubjectType`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            ///   - value4:
            ///   - value5:
            internal init(
                value1: Swift.Double? = nil,
                value2: Swift.Double? = nil,
                value3: Swift.Double? = nil,
                value4: Swift.Double? = nil,
                value5: Swift.Double? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
                self.value4 = value4
                self.value5 = value5
            }
            internal init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    value1 = try decoder.decodeFromSingleValueContainer()
                } catch {
                    errors.append(error)
                }
                do {
                    value2 = try decoder.decodeFromSingleValueContainer()
                } catch {
                    errors.append(error)
                }
                do {
                    value3 = try decoder.decodeFromSingleValueContainer()
                } catch {
                    errors.append(error)
                }
                do {
                    value4 = try decoder.decodeFromSingleValueContainer()
                } catch {
                    errors.append(error)
                }
                do {
                    value5 = try decoder.decodeFromSingleValueContainer()
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        value1,
                        value2,
                        value3,
                        value4,
                        value5
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            internal func encode(to encoder: any Encoder) throws {
                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                    value1,
                    value2,
                    value3,
                    value4,
                    value5
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/SubjectWikiInfo`.
        internal struct SubjectWikiInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SubjectWikiInfo/id`.
            internal var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/SubjectWikiInfo/infobox`.
            internal var infobox: Swift.String
            /// - Remark: Generated from `#/components/schemas/SubjectWikiInfo/name`.
            internal var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/SubjectWikiInfo/summary`.
            internal var summary: Swift.String
            /// - Remark: Generated from `#/components/schemas/SubjectWikiInfo/typeID`.
            internal var typeID: Components.Schemas.SubjectType
            /// Creates a new `SubjectWikiInfo`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - infobox:
            ///   - name:
            ///   - summary:
            ///   - typeID:
            internal init(
                id: Swift.Int,
                infobox: Swift.String,
                name: Swift.String,
                summary: Swift.String,
                typeID: Components.Schemas.SubjectType
            ) {
                self.id = id
                self.infobox = infobox
                self.name = name
                self.summary = summary
                self.typeID = typeID
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case infobox
                case name
                case summary
                case typeID
            }
        }
        /// - Remark: Generated from `#/components/schemas/Topic`.
        internal struct Topic: Codable, Hashable, Sendable {
            /// 发帖时间，unix time stamp in seconds
            ///
            /// - Remark: Generated from `#/components/schemas/Topic/createdAt`.
            internal var createdAt: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Topic/creator`.
            internal struct creatorPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Topic/creator/avatar`.
                internal struct avatarPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/Topic/creator/avatar/large`.
                    internal var large: Swift.String
                    /// - Remark: Generated from `#/components/schemas/Topic/creator/avatar/medium`.
                    internal var medium: Swift.String
                    /// - Remark: Generated from `#/components/schemas/Topic/creator/avatar/small`.
                    internal var small: Swift.String
                    /// Creates a new `avatarPayload`.
                    ///
                    /// - Parameters:
                    ///   - large:
                    ///   - medium:
                    ///   - small:
                    internal init(
                        large: Swift.String,
                        medium: Swift.String,
                        small: Swift.String
                    ) {
                        self.large = large
                        self.medium = medium
                        self.small = small
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case large
                        case medium
                        case small
                    }
                }
                /// - Remark: Generated from `#/components/schemas/Topic/creator/avatar`.
                internal var avatar: Components.Schemas.Topic.creatorPayload.avatarPayload
                /// - Remark: Generated from `#/components/schemas/Topic/creator/id`.
                internal var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/Topic/creator/nickname`.
                internal var nickname: Swift.String
                /// - Remark: Generated from `#/components/schemas/Topic/creator/sign`.
                internal var sign: Swift.String
                /// - Remark: Generated from `#/components/schemas/Topic/creator/user_group`.
                internal var user_group: Swift.Int
                /// - Remark: Generated from `#/components/schemas/Topic/creator/username`.
                internal var username: Swift.String
                /// Creates a new `creatorPayload`.
                ///
                /// - Parameters:
                ///   - avatar:
                ///   - id:
                ///   - nickname:
                ///   - sign:
                ///   - user_group:
                ///   - username:
                internal init(
                    avatar: Components.Schemas.Topic.creatorPayload.avatarPayload,
                    id: Swift.Int,
                    nickname: Swift.String,
                    sign: Swift.String,
                    user_group: Swift.Int,
                    username: Swift.String
                ) {
                    self.avatar = avatar
                    self.id = id
                    self.nickname = nickname
                    self.sign = sign
                    self.user_group = user_group
                    self.username = username
                }
                internal enum CodingKeys: String, CodingKey {
                    case avatar
                    case id
                    case nickname
                    case sign
                    case user_group
                    case username
                }
            }
            /// - Remark: Generated from `#/components/schemas/Topic/creator`.
            internal var creator: Components.Schemas.Topic.creatorPayload
            /// topic id
            ///
            /// - Remark: Generated from `#/components/schemas/Topic/id`.
            internal var id: Swift.Int
            /// 小组/条目ID
            ///
            /// - Remark: Generated from `#/components/schemas/Topic/parentID`.
            internal var parentID: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Topic/repliesCount`.
            internal var repliesCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Topic/title`.
            internal var title: Swift.String
            /// 最后回复时间，unix time stamp in seconds
            ///
            /// - Remark: Generated from `#/components/schemas/Topic/updatedAt`.
            internal var updatedAt: Swift.Int
            /// Creates a new `Topic`.
            ///
            /// - Parameters:
            ///   - createdAt: 发帖时间，unix time stamp in seconds
            ///   - creator:
            ///   - id: topic id
            ///   - parentID: 小组/条目ID
            ///   - repliesCount:
            ///   - title:
            ///   - updatedAt: 最后回复时间，unix time stamp in seconds
            internal init(
                createdAt: Swift.Int,
                creator: Components.Schemas.Topic.creatorPayload,
                id: Swift.Int,
                parentID: Swift.Int,
                repliesCount: Swift.Int,
                title: Swift.String,
                updatedAt: Swift.Int
            ) {
                self.createdAt = createdAt
                self.creator = creator
                self.id = id
                self.parentID = parentID
                self.repliesCount = repliesCount
                self.title = title
                self.updatedAt = updatedAt
            }
            internal enum CodingKeys: String, CodingKey {
                case createdAt
                case creator
                case id
                case parentID
                case repliesCount
                case title
                case updatedAt
            }
        }
        /// - Remark: Generated from `#/components/schemas/TopicCreation`.
        internal struct TopicCreation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TopicCreation/cf-turnstile-response`.
            internal var cf_hyphen_turnstile_hyphen_response: Swift.String
            /// bbcode
            ///
            /// - Remark: Generated from `#/components/schemas/TopicCreation/text`.
            internal var text: Swift.String
            /// - Remark: Generated from `#/components/schemas/TopicCreation/title`.
            internal var title: Swift.String
            /// Creates a new `TopicCreation`.
            ///
            /// - Parameters:
            ///   - cf_hyphen_turnstile_hyphen_response:
            ///   - text: bbcode
            ///   - title:
            internal init(
                cf_hyphen_turnstile_hyphen_response: Swift.String,
                text: Swift.String,
                title: Swift.String
            ) {
                self.cf_hyphen_turnstile_hyphen_response = cf_hyphen_turnstile_hyphen_response
                self.text = text
                self.title = title
            }
            internal enum CodingKeys: String, CodingKey {
                case cf_hyphen_turnstile_hyphen_response = "cf-turnstile-response"
                case text
                case title
            }
        }
        /// - Remark: Generated from `#/components/schemas/TopicDetail`.
        internal struct TopicDetail: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TopicDetail/createdAt`.
            internal var createdAt: Swift.Int
            /// - Remark: Generated from `#/components/schemas/TopicDetail/creator`.
            internal var creator: Components.Schemas.User
            /// - Remark: Generated from `#/components/schemas/TopicDetail/id`.
            internal var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/TopicDetail/parent`.
            internal struct parentPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TopicDetail/parent/value1`.
                internal var value1: Components.Schemas.Group?
                /// - Remark: Generated from `#/components/schemas/TopicDetail/parent/value2`.
                internal var value2: Components.Schemas.Subject?
                /// Creates a new `parentPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                internal init(
                    value1: Components.Schemas.Group? = nil,
                    value2: Components.Schemas.Subject? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                internal init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                internal func encode(to encoder: any Encoder) throws {
                    try value1?.encode(to: encoder)
                    try value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/TopicDetail/parent`.
            internal var parent: Components.Schemas.TopicDetail.parentPayload
            /// - Remark: Generated from `#/components/schemas/TopicDetail/reactions`.
            internal var reactions: [Components.Schemas.Reaction]
            /// - Remark: Generated from `#/components/schemas/TopicDetail/replies`.
            internal var replies: [Components.Schemas.Reply]
            /// - Remark: Generated from `#/components/schemas/TopicDetail/state`.
            internal var state: Swift.Int
            /// - Remark: Generated from `#/components/schemas/TopicDetail/text`.
            internal var text: Swift.String
            /// - Remark: Generated from `#/components/schemas/TopicDetail/title`.
            internal var title: Swift.String
            /// Creates a new `TopicDetail`.
            ///
            /// - Parameters:
            ///   - createdAt:
            ///   - creator:
            ///   - id:
            ///   - parent:
            ///   - reactions:
            ///   - replies:
            ///   - state:
            ///   - text:
            ///   - title:
            internal init(
                createdAt: Swift.Int,
                creator: Components.Schemas.User,
                id: Swift.Int,
                parent: Components.Schemas.TopicDetail.parentPayload,
                reactions: [Components.Schemas.Reaction],
                replies: [Components.Schemas.Reply],
                state: Swift.Int,
                text: Swift.String,
                title: Swift.String
            ) {
                self.createdAt = createdAt
                self.creator = creator
                self.id = id
                self.parent = parent
                self.reactions = reactions
                self.replies = replies
                self.state = state
                self.text = text
                self.title = title
            }
            internal enum CodingKeys: String, CodingKey {
                case createdAt
                case creator
                case id
                case parent
                case reactions
                case replies
                case state
                case text
                case title
            }
        }
        /// - Remark: Generated from `#/components/schemas/User`.
        internal struct User: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/User/avatar`.
            internal struct avatarPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/User/avatar/large`.
                internal var large: Swift.String
                /// - Remark: Generated from `#/components/schemas/User/avatar/medium`.
                internal var medium: Swift.String
                /// - Remark: Generated from `#/components/schemas/User/avatar/small`.
                internal var small: Swift.String
                /// Creates a new `avatarPayload`.
                ///
                /// - Parameters:
                ///   - large:
                ///   - medium:
                ///   - small:
                internal init(
                    large: Swift.String,
                    medium: Swift.String,
                    small: Swift.String
                ) {
                    self.large = large
                    self.medium = medium
                    self.small = small
                }
                internal enum CodingKeys: String, CodingKey {
                    case large
                    case medium
                    case small
                }
            }
            /// - Remark: Generated from `#/components/schemas/User/avatar`.
            internal var avatar: Components.Schemas.User.avatarPayload
            /// - Remark: Generated from `#/components/schemas/User/id`.
            internal var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/User/nickname`.
            internal var nickname: Swift.String
            /// - Remark: Generated from `#/components/schemas/User/sign`.
            internal var sign: Swift.String
            /// - Remark: Generated from `#/components/schemas/User/user_group`.
            internal var user_group: Swift.Int
            /// - Remark: Generated from `#/components/schemas/User/username`.
            internal var username: Swift.String
            /// Creates a new `User`.
            ///
            /// - Parameters:
            ///   - avatar:
            ///   - id:
            ///   - nickname:
            ///   - sign:
            ///   - user_group:
            ///   - username:
            internal init(
                avatar: Components.Schemas.User.avatarPayload,
                id: Swift.Int,
                nickname: Swift.String,
                sign: Swift.String,
                user_group: Swift.Int,
                username: Swift.String
            ) {
                self.avatar = avatar
                self.id = id
                self.nickname = nickname
                self.sign = sign
                self.user_group = user_group
                self.username = username
            }
            internal enum CodingKeys: String, CodingKey {
                case avatar
                case id
                case nickname
                case sign
                case user_group
                case username
            }
        }
        /// - Remark: Generated from `#/components/schemas/WikiPlatform`.
        internal struct WikiPlatform: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WikiPlatform/id`.
            internal var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/WikiPlatform/text`.
            internal var text: Swift.String
            /// - Remark: Generated from `#/components/schemas/WikiPlatform/wiki_tpl`.
            internal var wiki_tpl: Swift.String?
            /// Creates a new `WikiPlatform`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - text:
            ///   - wiki_tpl:
            internal init(
                id: Swift.Int,
                text: Swift.String,
                wiki_tpl: Swift.String? = nil
            ) {
                self.id = id
                self.text = text
                self.wiki_tpl = wiki_tpl
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case text
                case wiki_tpl
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    internal enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    internal enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    internal enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    internal enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
internal enum Operations {
    /// 获取绝交用户列表
    ///
    /// - Remark: HTTP `GET /p1/blocklist`.
    /// - Remark: Generated from `#/paths//p1/blocklist/get(getBlocklist)`.
    internal enum getBlocklist {
        internal static let id: Swift.String = "getBlocklist"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/blocklist/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getBlocklist.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getBlocklist.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getBlocklist.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.getBlocklist.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/blocklist/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/blocklist/GET/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/p1/blocklist/GET/responses/200/content/json/blocklist`.
                        internal var blocklist: [Swift.Int]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - blocklist:
                        internal init(blocklist: [Swift.Int]) {
                            self.blocklist = blocklist
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case blocklist
                        }
                    }
                    /// - Remark: Generated from `#/paths/p1/blocklist/GET/responses/200/content/application\/json`.
                    case json(Operations.getBlocklist.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.getBlocklist.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getBlocklist.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getBlocklist.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/blocklist/get(getBlocklist)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getBlocklist.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getBlocklist.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/blocklist/GET/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/blocklist/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getBlocklist.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getBlocklist.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/blocklist/get(getBlocklist)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.getBlocklist.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.getBlocklist.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 将用户添加到绝交列表
    ///
    /// - Remark: HTTP `POST /p1/blocklist`.
    /// - Remark: Generated from `#/paths//p1/blocklist/post(addToBlocklist)`.
    internal enum addToBlocklist {
        internal static let id: Swift.String = "addToBlocklist"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/blocklist/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.addToBlocklist.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.addToBlocklist.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.addToBlocklist.Input.Headers
            /// - Remark: Generated from `#/paths/p1/blocklist/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/blocklist/POST/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/p1/blocklist/POST/requestBody/json/id`.
                    internal var id: Swift.Int
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - id:
                    internal init(id: Swift.Int) {
                        self.id = id
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case id
                    }
                }
                /// - Remark: Generated from `#/paths/p1/blocklist/POST/requestBody/content/application\/json`.
                case json(Operations.addToBlocklist.Input.Body.jsonPayload)
            }
            internal var body: Operations.addToBlocklist.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.addToBlocklist.Input.Headers = .init(),
                body: Operations.addToBlocklist.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/blocklist/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/blocklist/POST/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/p1/blocklist/POST/responses/200/content/json/blocklist`.
                        internal var blocklist: [Swift.Int]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - blocklist:
                        internal init(blocklist: [Swift.Int]) {
                            self.blocklist = blocklist
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case blocklist
                        }
                    }
                    /// - Remark: Generated from `#/paths/p1/blocklist/POST/responses/200/content/application\/json`.
                    case json(Operations.addToBlocklist.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.addToBlocklist.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.addToBlocklist.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.addToBlocklist.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/blocklist/post(addToBlocklist)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.addToBlocklist.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.addToBlocklist.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/blocklist/POST/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/blocklist/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.addToBlocklist.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.addToBlocklist.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/blocklist/post(addToBlocklist)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.addToBlocklist.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.addToBlocklist.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 将用户从绝交列表移出
    ///
    /// - Remark: HTTP `DELETE /p1/blocklist/{id}`.
    /// - Remark: Generated from `#/paths//p1/blocklist/{id}/delete(removeFromBlocklist)`.
    internal enum removeFromBlocklist {
        internal static let id: Swift.String = "removeFromBlocklist"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/blocklist/{id}/DELETE/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/blocklist/{id}/DELETE/path/id`.
                internal var id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id:
                internal init(id: Swift.Int) {
                    self.id = id
                }
            }
            internal var path: Operations.removeFromBlocklist.Input.Path
            /// - Remark: Generated from `#/paths/p1/blocklist/{id}/DELETE/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.removeFromBlocklist.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.removeFromBlocklist.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.removeFromBlocklist.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.removeFromBlocklist.Input.Path,
                headers: Operations.removeFromBlocklist.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/blocklist/{id}/DELETE/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/blocklist/{id}/DELETE/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/p1/blocklist/{id}/DELETE/responses/200/content/json/blocklist`.
                        internal var blocklist: [Swift.Int]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - blocklist:
                        internal init(blocklist: [Swift.Int]) {
                            self.blocklist = blocklist
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case blocklist
                        }
                    }
                    /// - Remark: Generated from `#/paths/p1/blocklist/{id}/DELETE/responses/200/content/application\/json`.
                    case json(Operations.removeFromBlocklist.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.removeFromBlocklist.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.removeFromBlocklist.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.removeFromBlocklist.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/blocklist/{id}/delete(removeFromBlocklist)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.removeFromBlocklist.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.removeFromBlocklist.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/blocklist/{id}/DELETE/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/blocklist/{id}/DELETE/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.removeFromBlocklist.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.removeFromBlocklist.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/blocklist/{id}/delete(removeFromBlocklist)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.removeFromBlocklist.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.removeFromBlocklist.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 标记通知为已读
    ///
    /// 标记通知为已读
    ///
    /// 不传id时会清空所有未读通知
    ///
    /// - Remark: HTTP `POST /p1/clear-notify`.
    /// - Remark: Generated from `#/paths//p1/clear-notify/post(clearNotice)`.
    internal enum clearNotice {
        internal static let id: Swift.String = "clearNotice"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/clear-notify/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.clearNotice.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.clearNotice.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.clearNotice.Input.Headers
            /// - Remark: Generated from `#/paths/p1/clear-notify/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/clear-notify/POST/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/p1/clear-notify/POST/requestBody/json/id`.
                    internal var id: [Swift.Int]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - id:
                    internal init(id: [Swift.Int]? = nil) {
                        self.id = id
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case id
                    }
                }
                /// - Remark: Generated from `#/paths/p1/clear-notify/POST/requestBody/content/application\/json`.
                case json(Operations.clearNotice.Input.Body.jsonPayload)
            }
            internal var body: Operations.clearNotice.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.clearNotice.Input.Headers = .init(),
                body: Operations.clearNotice.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// 没有返回值
            ///
            /// - Remark: Generated from `#/paths//p1/clear-notify/post(clearNotice)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.clearNotice.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.clearNotice.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/clear-notify/POST/responses/401/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/clear-notify/POST/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.clearNotice.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.clearNotice.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// 未登录
            ///
            /// - Remark: Generated from `#/paths//p1/clear-notify/post(clearNotice)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.clearNotice.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.clearNotice.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/clear-notify/POST/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/clear-notify/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.clearNotice.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.clearNotice.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/clear-notify/post(clearNotice)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.clearNotice.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.clearNotice.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /p1/groups/-/posts/{postID}`.
    /// - Remark: Generated from `#/paths//p1/groups/-/posts/{postID}/get(getGroupPost)`.
    internal enum getGroupPost {
        internal static let id: Swift.String = "getGroupPost"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/GET/path/postID`.
                internal var postID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - postID:
                internal init(postID: Swift.Int) {
                    self.postID = postID
                }
            }
            internal var path: Operations.getGroupPost.Input.Path
            /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getGroupPost.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getGroupPost.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getGroupPost.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.getGroupPost.Input.Path,
                headers: Operations.getGroupPost.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.GroupReply)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.GroupReply {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getGroupPost.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getGroupPost.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/groups/-/posts/{postID}/get(getGroupPost)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getGroupPost.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getGroupPost.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/GET/responses/404/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getGroupPost.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getGroupPost.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/groups/-/posts/{postID}/get(getGroupPost)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.getGroupPost.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.getGroupPost.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/GET/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getGroupPost.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getGroupPost.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/groups/-/posts/{postID}/get(getGroupPost)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.getGroupPost.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.getGroupPost.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `PUT /p1/groups/-/posts/{postID}`.
    /// - Remark: Generated from `#/paths//p1/groups/-/posts/{postID}/put(editGroupPost)`.
    internal enum editGroupPost {
        internal static let id: Swift.String = "editGroupPost"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/PUT/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/PUT/path/postID`.
                internal var postID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - postID:
                internal init(postID: Swift.Int) {
                    self.postID = postID
                }
            }
            internal var path: Operations.editGroupPost.Input.Path
            /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/PUT/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.editGroupPost.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.editGroupPost.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.editGroupPost.Input.Headers
            /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/PUT/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/PUT/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/PUT/requestBody/json/text`.
                    internal var text: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - text:
                    internal init(text: Swift.String) {
                        self.text = text
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case text
                    }
                }
                /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/PUT/requestBody/content/application\/json`.
                case json(Operations.editGroupPost.Input.Body.jsonPayload)
            }
            internal var body: Operations.editGroupPost.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.editGroupPost.Input.Path,
                headers: Operations.editGroupPost.Input.Headers = .init(),
                body: Operations.editGroupPost.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/PUT/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/PUT/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIObjectContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: OpenAPIRuntime.OpenAPIObjectContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.editGroupPost.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.editGroupPost.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/groups/-/posts/{postID}/put(editGroupPost)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.editGroupPost.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.editGroupPost.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/PUT/responses/401/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/PUT/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.editGroupPost.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.editGroupPost.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/groups/-/posts/{postID}/put(editGroupPost)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.editGroupPost.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.editGroupPost.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/PUT/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/PUT/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.editGroupPost.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.editGroupPost.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/groups/-/posts/{postID}/put(editGroupPost)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.editGroupPost.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.editGroupPost.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `DELETE /p1/groups/-/posts/{postID}`.
    /// - Remark: Generated from `#/paths//p1/groups/-/posts/{postID}/delete(deleteGroupPost)`.
    internal enum deleteGroupPost {
        internal static let id: Swift.String = "deleteGroupPost"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/DELETE/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/DELETE/path/postID`.
                internal var postID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - postID:
                internal init(postID: Swift.Int) {
                    self.postID = postID
                }
            }
            internal var path: Operations.deleteGroupPost.Input.Path
            /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/DELETE/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteGroupPost.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteGroupPost.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.deleteGroupPost.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.deleteGroupPost.Input.Path,
                headers: Operations.deleteGroupPost.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/DELETE/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/DELETE/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIObjectContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: OpenAPIRuntime.OpenAPIObjectContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.deleteGroupPost.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.deleteGroupPost.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/groups/-/posts/{postID}/delete(deleteGroupPost)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.deleteGroupPost.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.deleteGroupPost.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/DELETE/responses/401/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/DELETE/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.deleteGroupPost.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.deleteGroupPost.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/groups/-/posts/{postID}/delete(deleteGroupPost)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.deleteGroupPost.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.deleteGroupPost.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/DELETE/responses/404/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.deleteGroupPost.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.deleteGroupPost.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/groups/-/posts/{postID}/delete(deleteGroupPost)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.deleteGroupPost.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.deleteGroupPost.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/DELETE/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/-/posts/{postID}/DELETE/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.deleteGroupPost.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.deleteGroupPost.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/groups/-/posts/{postID}/delete(deleteGroupPost)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.deleteGroupPost.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.deleteGroupPost.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 获取帖子列表
    ///
    /// - Remark: HTTP `GET /p1/groups/-/topics/{id}`.
    /// - Remark: Generated from `#/paths//p1/groups/-/topics/{id}/get(getGroupTopicDetail)`.
    internal enum getGroupTopicDetail {
        internal static let id: Swift.String = "getGroupTopicDetail"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/groups/-/topics/{id}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/-/topics/{id}/GET/path/id`.
                internal var id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id:
                internal init(id: Swift.Int) {
                    self.id = id
                }
            }
            internal var path: Operations.getGroupTopicDetail.Input.Path
            /// - Remark: Generated from `#/paths/p1/groups/-/topics/{id}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getGroupTopicDetail.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getGroupTopicDetail.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getGroupTopicDetail.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.getGroupTopicDetail.Input.Path,
                headers: Operations.getGroupTopicDetail.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/-/topics/{id}/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/-/topics/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.TopicDetail)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.TopicDetail {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getGroupTopicDetail.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getGroupTopicDetail.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/groups/-/topics/{id}/get(getGroupTopicDetail)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getGroupTopicDetail.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getGroupTopicDetail.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/-/topics/{id}/GET/responses/404/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/-/topics/{id}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getGroupTopicDetail.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getGroupTopicDetail.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// 小组不存在
            ///
            /// - Remark: Generated from `#/paths//p1/groups/-/topics/{id}/get(getGroupTopicDetail)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.getGroupTopicDetail.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.getGroupTopicDetail.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/-/topics/{id}/GET/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/-/topics/{id}/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getGroupTopicDetail.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getGroupTopicDetail.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/groups/-/topics/{id}/get(getGroupTopicDetail)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.getGroupTopicDetail.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.getGroupTopicDetail.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `PUT /p1/groups/-/topics/{topicID}`.
    /// - Remark: Generated from `#/paths//p1/groups/-/topics/{topicID}/put(editGroupTopic)`.
    internal enum editGroupTopic {
        internal static let id: Swift.String = "editGroupTopic"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/groups/-/topics/{topicID}/PUT/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/-/topics/{topicID}/PUT/path/topicID`.
                internal var topicID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - topicID:
                internal init(topicID: Swift.Int) {
                    self.topicID = topicID
                }
            }
            internal var path: Operations.editGroupTopic.Input.Path
            /// - Remark: Generated from `#/paths/p1/groups/-/topics/{topicID}/PUT/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.editGroupTopic.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.editGroupTopic.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.editGroupTopic.Input.Headers
            /// - Remark: Generated from `#/paths/p1/groups/-/topics/{topicID}/PUT/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/-/topics/{topicID}/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.TopicCreation)
            }
            internal var body: Operations.editGroupTopic.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.editGroupTopic.Input.Path,
                headers: Operations.editGroupTopic.Input.Headers = .init(),
                body: Operations.editGroupTopic.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/-/topics/{topicID}/PUT/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/-/topics/{topicID}/PUT/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIObjectContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: OpenAPIRuntime.OpenAPIObjectContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.editGroupTopic.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.editGroupTopic.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/groups/-/topics/{topicID}/put(editGroupTopic)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.editGroupTopic.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.editGroupTopic.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/-/topics/{topicID}/PUT/responses/400/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/-/topics/{topicID}/PUT/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.editGroupTopic.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.editGroupTopic.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/groups/-/topics/{topicID}/put(editGroupTopic)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.editGroupTopic.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.editGroupTopic.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/-/topics/{topicID}/PUT/responses/401/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/-/topics/{topicID}/PUT/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.editGroupTopic.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.editGroupTopic.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/groups/-/topics/{topicID}/put(editGroupTopic)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.editGroupTopic.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.editGroupTopic.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/-/topics/{topicID}/PUT/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/-/topics/{topicID}/PUT/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.editGroupTopic.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.editGroupTopic.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/groups/-/topics/{topicID}/put(editGroupTopic)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.editGroupTopic.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.editGroupTopic.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `POST /p1/groups/-/topics/{topicID}/replies`.
    /// - Remark: Generated from `#/paths//p1/groups/-/topics/{topicID}/replies/post(createGroupReply)`.
    internal enum createGroupReply {
        internal static let id: Swift.String = "createGroupReply"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/groups/-/topics/{topicID}/replies/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/-/topics/{topicID}/replies/POST/path/topicID`.
                internal var topicID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - topicID:
                internal init(topicID: Swift.Int) {
                    self.topicID = topicID
                }
            }
            internal var path: Operations.createGroupReply.Input.Path
            /// - Remark: Generated from `#/paths/p1/groups/-/topics/{topicID}/replies/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createGroupReply.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createGroupReply.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.createGroupReply.Input.Headers
            /// - Remark: Generated from `#/paths/p1/groups/-/topics/{topicID}/replies/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/-/topics/{topicID}/replies/POST/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/p1/groups/-/topics/{topicID}/replies/POST/requestBody/json/cf-turnstile-response`.
                    internal var cf_hyphen_turnstile_hyphen_response: Swift.String
                    /// - Remark: Generated from `#/paths/p1/groups/-/topics/{topicID}/replies/POST/requestBody/json/content`.
                    internal var content: Swift.String
                    /// 被回复的 topic ID, `0` 代表回复楼主
                    ///
                    /// - Remark: Generated from `#/paths/p1/groups/-/topics/{topicID}/replies/POST/requestBody/json/replyTo`.
                    internal var replyTo: Swift.Int?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cf_hyphen_turnstile_hyphen_response:
                    ///   - content:
                    ///   - replyTo: 被回复的 topic ID, `0` 代表回复楼主
                    internal init(
                        cf_hyphen_turnstile_hyphen_response: Swift.String,
                        content: Swift.String,
                        replyTo: Swift.Int? = nil
                    ) {
                        self.cf_hyphen_turnstile_hyphen_response = cf_hyphen_turnstile_hyphen_response
                        self.content = content
                        self.replyTo = replyTo
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case cf_hyphen_turnstile_hyphen_response = "cf-turnstile-response"
                        case content
                        case replyTo
                    }
                }
                /// - Remark: Generated from `#/paths/p1/groups/-/topics/{topicID}/replies/POST/requestBody/content/application\/json`.
                case json(Operations.createGroupReply.Input.Body.jsonPayload)
            }
            internal var body: Operations.createGroupReply.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.createGroupReply.Input.Path,
                headers: Operations.createGroupReply.Input.Headers = .init(),
                body: Operations.createGroupReply.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/-/topics/{topicID}/replies/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/-/topics/{topicID}/replies/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.BasicReply)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.BasicReply {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.createGroupReply.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.createGroupReply.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/groups/-/topics/{topicID}/replies/post(createGroupReply)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createGroupReply.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.createGroupReply.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/-/topics/{topicID}/replies/POST/responses/401/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/-/topics/{topicID}/replies/POST/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.createGroupReply.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.createGroupReply.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/groups/-/topics/{topicID}/replies/post(createGroupReply)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.createGroupReply.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.createGroupReply.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/-/topics/{topicID}/replies/POST/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/-/topics/{topicID}/replies/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.createGroupReply.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.createGroupReply.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/groups/-/topics/{topicID}/replies/post(createGroupReply)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.createGroupReply.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.createGroupReply.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 获取帖子列表
    ///
    /// - Remark: HTTP `GET /p1/groups/{groupName}/members`.
    /// - Remark: Generated from `#/paths//p1/groups/{groupName}/members/get(listGroupMembersByName)`.
    internal enum listGroupMembersByName {
        internal static let id: Swift.String = "listGroupMembersByName"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/groups/{groupName}/members/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/{groupName}/members/GET/path/groupName`.
                internal var groupName: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - groupName:
                internal init(groupName: Swift.String) {
                    self.groupName = groupName
                }
            }
            internal var path: Operations.listGroupMembersByName.Input.Path
            /// - Remark: Generated from `#/paths/p1/groups/{groupName}/members/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/{groupName}/members/GET/query/type`.
                internal struct _typePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/p1/groups/{groupName}/members/GET/query/type/value1`.
                    internal enum Value1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                        case mod = "mod"
                    }
                    /// - Remark: Generated from `#/paths/p1/groups/{groupName}/members/GET/query/type/value1`.
                    internal var value1: Operations.listGroupMembersByName.Input.Query._typePayload.Value1Payload?
                    /// - Remark: Generated from `#/paths/p1/groups/{groupName}/members/GET/query/type/value2`.
                    internal enum Value2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                        case normal = "normal"
                    }
                    /// - Remark: Generated from `#/paths/p1/groups/{groupName}/members/GET/query/type/value2`.
                    internal var value2: Operations.listGroupMembersByName.Input.Query._typePayload.Value2Payload?
                    /// - Remark: Generated from `#/paths/p1/groups/{groupName}/members/GET/query/type/value3`.
                    internal enum Value3Payload: String, Codable, Hashable, Sendable, CaseIterable {
                        case all = "all"
                    }
                    /// - Remark: Generated from `#/paths/p1/groups/{groupName}/members/GET/query/type/value3`.
                    internal var value3: Operations.listGroupMembersByName.Input.Query._typePayload.Value3Payload?
                    /// Creates a new `_typePayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    ///   - value3:
                    internal init(
                        value1: Operations.listGroupMembersByName.Input.Query._typePayload.Value1Payload? = nil,
                        value2: Operations.listGroupMembersByName.Input.Query._typePayload.Value2Payload? = nil,
                        value3: Operations.listGroupMembersByName.Input.Query._typePayload.Value3Payload? = nil
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                        self.value3 = value3
                    }
                    internal init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            value1 = try decoder.decodeFromSingleValueContainer()
                        } catch {
                            errors.append(error)
                        }
                        do {
                            value2 = try decoder.decodeFromSingleValueContainer()
                        } catch {
                            errors.append(error)
                        }
                        do {
                            value3 = try decoder.decodeFromSingleValueContainer()
                        } catch {
                            errors.append(error)
                        }
                        try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                            [
                                value1,
                                value2,
                                value3
                            ],
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    internal func encode(to encoder: any Encoder) throws {
                        try encoder.encodeFirstNonNilValueToSingleValueContainer([
                            value1,
                            value2,
                            value3
                        ])
                    }
                }
                /// - Remark: Generated from `#/paths/p1/groups/{groupName}/members/GET/query/type`.
                internal var _type: Operations.listGroupMembersByName.Input.Query._typePayload?
                /// - Remark: Generated from `#/paths/p1/groups/{groupName}/members/GET/query/limit`.
                internal var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/p1/groups/{groupName}/members/GET/query/offset`.
                internal var offset: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - limit:
                ///   - offset:
                internal init(
                    _type: Operations.listGroupMembersByName.Input.Query._typePayload? = nil,
                    limit: Swift.Int? = nil,
                    offset: Swift.Int? = nil
                ) {
                    self._type = _type
                    self.limit = limit
                    self.offset = offset
                }
            }
            internal var query: Operations.listGroupMembersByName.Input.Query
            /// - Remark: Generated from `#/paths/p1/groups/{groupName}/members/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listGroupMembersByName.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listGroupMembersByName.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.listGroupMembersByName.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.listGroupMembersByName.Input.Path,
                query: Operations.listGroupMembersByName.Input.Query = .init(),
                headers: Operations.listGroupMembersByName.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/{groupName}/members/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/{groupName}/members/GET/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/p1/groups/{groupName}/members/GET/responses/200/content/json/data`.
                        internal var data: [Components.Schemas.GroupMember]
                        /// - Remark: Generated from `#/paths/p1/groups/{groupName}/members/GET/responses/200/content/json/total`.
                        internal var total: Swift.Int
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - data:
                        ///   - total:
                        internal init(
                            data: [Components.Schemas.GroupMember],
                            total: Swift.Int
                        ) {
                            self.data = data
                            self.total = total
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case data
                            case total
                        }
                    }
                    /// - Remark: Generated from `#/paths/p1/groups/{groupName}/members/GET/responses/200/content/application\/json`.
                    case json(Operations.listGroupMembersByName.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.listGroupMembersByName.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.listGroupMembersByName.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.listGroupMembersByName.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/groups/{groupName}/members/get(listGroupMembersByName)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.listGroupMembersByName.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.listGroupMembersByName.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/{groupName}/members/GET/responses/404/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/{groupName}/members/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.listGroupMembersByName.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.listGroupMembersByName.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// 小组不存在
            ///
            /// - Remark: Generated from `#/paths//p1/groups/{groupName}/members/get(listGroupMembersByName)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.listGroupMembersByName.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.listGroupMembersByName.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/{groupName}/members/GET/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/{groupName}/members/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.listGroupMembersByName.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.listGroupMembersByName.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/groups/{groupName}/members/get(listGroupMembersByName)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.listGroupMembersByName.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.listGroupMembersByName.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 获取小组首页
    ///
    /// - Remark: HTTP `GET /p1/groups/{groupName}/profile`.
    /// - Remark: Generated from `#/paths//p1/groups/{groupName}/profile/get(getGroupProfile)`.
    internal enum getGroupProfile {
        internal static let id: Swift.String = "getGroupProfile"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/groups/{groupName}/profile/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/{groupName}/profile/GET/path/groupName`.
                internal var groupName: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - groupName:
                internal init(groupName: Swift.String) {
                    self.groupName = groupName
                }
            }
            internal var path: Operations.getGroupProfile.Input.Path
            /// - Remark: Generated from `#/paths/p1/groups/{groupName}/profile/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/{groupName}/profile/GET/query/limit`.
                internal var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/p1/groups/{groupName}/profile/GET/query/offset`.
                internal var offset: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit:
                ///   - offset:
                internal init(
                    limit: Swift.Int? = nil,
                    offset: Swift.Int? = nil
                ) {
                    self.limit = limit
                    self.offset = offset
                }
            }
            internal var query: Operations.getGroupProfile.Input.Query
            /// - Remark: Generated from `#/paths/p1/groups/{groupName}/profile/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getGroupProfile.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getGroupProfile.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getGroupProfile.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.getGroupProfile.Input.Path,
                query: Operations.getGroupProfile.Input.Query = .init(),
                headers: Operations.getGroupProfile.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/{groupName}/profile/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/{groupName}/profile/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.GroupProfile)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.GroupProfile {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getGroupProfile.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getGroupProfile.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/groups/{groupName}/profile/get(getGroupProfile)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getGroupProfile.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getGroupProfile.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/{groupName}/profile/GET/responses/404/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/{groupName}/profile/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getGroupProfile.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getGroupProfile.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// 小组不存在
            ///
            /// - Remark: Generated from `#/paths//p1/groups/{groupName}/profile/get(getGroupProfile)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.getGroupProfile.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.getGroupProfile.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/{groupName}/profile/GET/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/{groupName}/profile/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getGroupProfile.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getGroupProfile.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/groups/{groupName}/profile/get(getGroupProfile)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.getGroupProfile.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.getGroupProfile.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 获取帖子列表
    ///
    /// - Remark: HTTP `GET /p1/groups/{groupName}/topics`.
    /// - Remark: Generated from `#/paths//p1/groups/{groupName}/topics/get(getGroupTopicsByGroupName)`.
    internal enum getGroupTopicsByGroupName {
        internal static let id: Swift.String = "getGroupTopicsByGroupName"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/groups/{groupName}/topics/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/{groupName}/topics/GET/path/groupName`.
                internal var groupName: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - groupName:
                internal init(groupName: Swift.String) {
                    self.groupName = groupName
                }
            }
            internal var path: Operations.getGroupTopicsByGroupName.Input.Path
            /// - Remark: Generated from `#/paths/p1/groups/{groupName}/topics/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/{groupName}/topics/GET/query/limit`.
                internal var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/p1/groups/{groupName}/topics/GET/query/offset`.
                internal var offset: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit:
                ///   - offset:
                internal init(
                    limit: Swift.Int? = nil,
                    offset: Swift.Int? = nil
                ) {
                    self.limit = limit
                    self.offset = offset
                }
            }
            internal var query: Operations.getGroupTopicsByGroupName.Input.Query
            /// - Remark: Generated from `#/paths/p1/groups/{groupName}/topics/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getGroupTopicsByGroupName.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getGroupTopicsByGroupName.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getGroupTopicsByGroupName.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.getGroupTopicsByGroupName.Input.Path,
                query: Operations.getGroupTopicsByGroupName.Input.Query = .init(),
                headers: Operations.getGroupTopicsByGroupName.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/{groupName}/topics/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/{groupName}/topics/GET/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/p1/groups/{groupName}/topics/GET/responses/200/content/json/data`.
                        internal var data: [Components.Schemas.Topic]
                        /// - Remark: Generated from `#/paths/p1/groups/{groupName}/topics/GET/responses/200/content/json/total`.
                        internal var total: Swift.Int
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - data:
                        ///   - total:
                        internal init(
                            data: [Components.Schemas.Topic],
                            total: Swift.Int
                        ) {
                            self.data = data
                            self.total = total
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case data
                            case total
                        }
                    }
                    /// - Remark: Generated from `#/paths/p1/groups/{groupName}/topics/GET/responses/200/content/application\/json`.
                    case json(Operations.getGroupTopicsByGroupName.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.getGroupTopicsByGroupName.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getGroupTopicsByGroupName.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getGroupTopicsByGroupName.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/groups/{groupName}/topics/get(getGroupTopicsByGroupName)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getGroupTopicsByGroupName.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getGroupTopicsByGroupName.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/{groupName}/topics/GET/responses/404/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/{groupName}/topics/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getGroupTopicsByGroupName.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getGroupTopicsByGroupName.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// 小组不存在
            ///
            /// - Remark: Generated from `#/paths//p1/groups/{groupName}/topics/get(getGroupTopicsByGroupName)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.getGroupTopicsByGroupName.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.getGroupTopicsByGroupName.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/{groupName}/topics/GET/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/{groupName}/topics/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getGroupTopicsByGroupName.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getGroupTopicsByGroupName.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/groups/{groupName}/topics/get(getGroupTopicsByGroupName)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.getGroupTopicsByGroupName.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.getGroupTopicsByGroupName.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `POST /p1/groups/{groupName}/topics`.
    /// - Remark: Generated from `#/paths//p1/groups/{groupName}/topics/post(createNewGroupTopic)`.
    internal enum createNewGroupTopic {
        internal static let id: Swift.String = "createNewGroupTopic"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/groups/{groupName}/topics/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/{groupName}/topics/POST/path/groupName`.
                internal var groupName: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - groupName:
                internal init(groupName: Swift.String) {
                    self.groupName = groupName
                }
            }
            internal var path: Operations.createNewGroupTopic.Input.Path
            /// - Remark: Generated from `#/paths/p1/groups/{groupName}/topics/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createNewGroupTopic.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createNewGroupTopic.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.createNewGroupTopic.Input.Headers
            /// - Remark: Generated from `#/paths/p1/groups/{groupName}/topics/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/{groupName}/topics/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.TopicCreation)
            }
            internal var body: Operations.createNewGroupTopic.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.createNewGroupTopic.Input.Path,
                headers: Operations.createNewGroupTopic.Input.Headers = .init(),
                body: Operations.createNewGroupTopic.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/{groupName}/topics/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/{groupName}/topics/POST/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// new topic id
                        ///
                        /// - Remark: Generated from `#/paths/p1/groups/{groupName}/topics/POST/responses/200/content/json/id`.
                        internal var id: Swift.Int
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - id: new topic id
                        internal init(id: Swift.Int) {
                            self.id = id
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/paths/p1/groups/{groupName}/topics/POST/responses/200/content/application\/json`.
                    case json(Operations.createNewGroupTopic.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.createNewGroupTopic.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.createNewGroupTopic.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.createNewGroupTopic.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/groups/{groupName}/topics/post(createNewGroupTopic)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createNewGroupTopic.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.createNewGroupTopic.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/groups/{groupName}/topics/POST/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/groups/{groupName}/topics/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.createNewGroupTopic.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.createNewGroupTopic.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/groups/{groupName}/topics/post(createNewGroupTopic)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.createNewGroupTopic.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.createNewGroupTopic.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 需要 [turnstile](https://developers.cloudflare.com/turnstile/get-started/client-side-rendering/)
    ///
    /// next.bgm.tv 域名对应的 site-key 为 `0x4AAAAAAABkMYinukE8nzYS`
    ///
    /// dev.bgm38.com 域名使用测试用的 site-key `1x00000000000000000000AA`
    ///
    /// - Remark: HTTP `POST /p1/login`.
    /// - Remark: Generated from `#/paths//p1/login/post(login)`.
    internal enum login {
        internal static let id: Swift.String = "login"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/login/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.login.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.login.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.login.Input.Headers
            /// - Remark: Generated from `#/paths/p1/login/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/login/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.LoginRequestBody)
            }
            internal var body: Operations.login.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.login.Input.Headers = .init(),
                body: Operations.login.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/login/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// example: "chiiNextSessionID=12345abc"
                    ///
                    /// - Remark: Generated from `#/paths/p1/login/POST/responses/200/headers/Set-Cookie`.
                    internal var Set_hyphen_Cookie: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Set_hyphen_Cookie: example: "chiiNextSessionID=12345abc"
                    internal init(Set_hyphen_Cookie: Swift.String? = nil) {
                        self.Set_hyphen_Cookie = Set_hyphen_Cookie
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.login.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/p1/login/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/login/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.User)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.User {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.login.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.login.Output.Ok.Headers = .init(),
                    body: Operations.login.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/login/post(login)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.login.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.login.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/login/POST/responses/400/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/login/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.login.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.login.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// request validation error
            ///
            /// - Remark: Generated from `#/paths//p1/login/post(login)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.login.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.login.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/login/POST/responses/401/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// total limit per 10 minutes
                    ///
                    /// - Remark: Generated from `#/paths/p1/login/POST/responses/401/headers/X-RateLimit-Limit`.
                    internal var X_hyphen_RateLimit_hyphen_Limit: Swift.Int?
                    /// remaining rate limit
                    ///
                    /// - Remark: Generated from `#/paths/p1/login/POST/responses/401/headers/X-RateLimit-Remaining`.
                    internal var X_hyphen_RateLimit_hyphen_Remaining: Swift.Int?
                    /// seconds to reset rate limit
                    ///
                    /// - Remark: Generated from `#/paths/p1/login/POST/responses/401/headers/X-RateLimit-Reset`.
                    internal var X_hyphen_RateLimit_hyphen_Reset: Swift.Int?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - X_hyphen_RateLimit_hyphen_Limit: total limit per 10 minutes
                    ///   - X_hyphen_RateLimit_hyphen_Remaining: remaining rate limit
                    ///   - X_hyphen_RateLimit_hyphen_Reset: seconds to reset rate limit
                    internal init(
                        X_hyphen_RateLimit_hyphen_Limit: Swift.Int? = nil,
                        X_hyphen_RateLimit_hyphen_Remaining: Swift.Int? = nil,
                        X_hyphen_RateLimit_hyphen_Reset: Swift.Int? = nil
                    ) {
                        self.X_hyphen_RateLimit_hyphen_Limit = X_hyphen_RateLimit_hyphen_Limit
                        self.X_hyphen_RateLimit_hyphen_Remaining = X_hyphen_RateLimit_hyphen_Remaining
                        self.X_hyphen_RateLimit_hyphen_Reset = X_hyphen_RateLimit_hyphen_Reset
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.login.Output.Unauthorized.Headers
                /// - Remark: Generated from `#/paths/p1/login/POST/responses/401/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/login/POST/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.login.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.login.Output.Unauthorized.Headers = .init(),
                    body: Operations.login.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// 验证码错误/账号密码不匹配
            ///
            /// - Remark: Generated from `#/paths//p1/login/post(login)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.login.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.login.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/login/POST/responses/429/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// limit per 10 minutes
                    ///
                    /// - Remark: Generated from `#/paths/p1/login/POST/responses/429/headers/X-RateLimit-Limit`.
                    internal var X_hyphen_RateLimit_hyphen_Limit: Swift.Int?
                    /// remaining rate limit
                    ///
                    /// - Remark: Generated from `#/paths/p1/login/POST/responses/429/headers/X-RateLimit-Remaining`.
                    internal var X_hyphen_RateLimit_hyphen_Remaining: Swift.Int?
                    /// seconds to reset rate limit
                    ///
                    /// - Remark: Generated from `#/paths/p1/login/POST/responses/429/headers/X-RateLimit-Reset`.
                    internal var X_hyphen_RateLimit_hyphen_Reset: Swift.Int?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - X_hyphen_RateLimit_hyphen_Limit: limit per 10 minutes
                    ///   - X_hyphen_RateLimit_hyphen_Remaining: remaining rate limit
                    ///   - X_hyphen_RateLimit_hyphen_Reset: seconds to reset rate limit
                    internal init(
                        X_hyphen_RateLimit_hyphen_Limit: Swift.Int? = nil,
                        X_hyphen_RateLimit_hyphen_Remaining: Swift.Int? = nil,
                        X_hyphen_RateLimit_hyphen_Reset: Swift.Int? = nil
                    ) {
                        self.X_hyphen_RateLimit_hyphen_Limit = X_hyphen_RateLimit_hyphen_Limit
                        self.X_hyphen_RateLimit_hyphen_Remaining = X_hyphen_RateLimit_hyphen_Remaining
                        self.X_hyphen_RateLimit_hyphen_Reset = X_hyphen_RateLimit_hyphen_Reset
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.login.Output.TooManyRequests.Headers
                /// - Remark: Generated from `#/paths/p1/login/POST/responses/429/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/login/POST/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.login.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.login.Output.TooManyRequests.Headers = .init(),
                    body: Operations.login.Output.TooManyRequests.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// 失败次数太多，需要过一段时间再重试
            ///
            /// - Remark: Generated from `#/paths//p1/login/post(login)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.login.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            internal var tooManyRequests: Operations.login.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/login/POST/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/login/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.login.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.login.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/login/post(login)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.login.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.login.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 登出
    ///
    /// - Remark: HTTP `POST /p1/logout`.
    /// - Remark: Generated from `#/paths//p1/logout/post(logout)`.
    internal enum logout {
        internal static let id: Swift.String = "logout"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/logout/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.logout.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.logout.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.logout.Input.Headers
            /// - Remark: Generated from `#/paths/p1/logout/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/logout/POST/requestBody/content/application\/json`.
                case json(OpenAPIRuntime.OpenAPIObjectContainer)
            }
            internal var body: Operations.logout.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.logout.Input.Headers = .init(),
                body: Operations.logout.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/logout/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/logout/POST/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIValueContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: OpenAPIRuntime.OpenAPIValueContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.logout.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.logout.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/logout/post(logout)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.logout.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.logout.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/logout/POST/responses/401/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/logout/POST/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.logout.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.logout.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// 未登录
            ///
            /// - Remark: Generated from `#/paths//p1/logout/post(logout)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.logout.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.logout.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/logout/POST/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/logout/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.logout.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.logout.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/logout/post(logout)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.logout.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.logout.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /p1/me`.
    /// - Remark: Generated from `#/paths//p1/me/get(getCurrentUser)`.
    internal enum getCurrentUser {
        internal static let id: Swift.String = "getCurrentUser"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/me/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getCurrentUser.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getCurrentUser.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getCurrentUser.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.getCurrentUser.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/me/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/me/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CurrentUser)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.CurrentUser {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getCurrentUser.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getCurrentUser.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/me/get(getCurrentUser)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getCurrentUser.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getCurrentUser.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/me/GET/responses/401/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/me/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getCurrentUser.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getCurrentUser.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/me/get(getCurrentUser)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.getCurrentUser.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.getCurrentUser.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/me/GET/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/me/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getCurrentUser.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getCurrentUser.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/me/get(getCurrentUser)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.getCurrentUser.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.getCurrentUser.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 获取未读通知
    ///
    /// - Remark: HTTP `GET /p1/notify`.
    /// - Remark: Generated from `#/paths//p1/notify/get(listNotice)`.
    internal enum listNotice {
        internal static let id: Swift.String = "listNotice"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/notify/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// max 40
                ///
                /// - Remark: Generated from `#/paths/p1/notify/GET/query/limit`.
                internal var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/p1/notify/GET/query/unread`.
                internal var unread: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit: max 40
                ///   - unread:
                internal init(
                    limit: Swift.Int? = nil,
                    unread: Swift.Bool? = nil
                ) {
                    self.limit = limit
                    self.unread = unread
                }
            }
            internal var query: Operations.listNotice.Input.Query
            /// - Remark: Generated from `#/paths/p1/notify/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listNotice.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listNotice.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.listNotice.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.listNotice.Input.Query = .init(),
                headers: Operations.listNotice.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/notify/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/notify/GET/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/p1/notify/GET/responses/200/content/json/data`.
                        internal var data: [Components.Schemas.Notice]
                        /// - Remark: Generated from `#/paths/p1/notify/GET/responses/200/content/json/total`.
                        internal var total: Swift.Int
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - data:
                        ///   - total:
                        internal init(
                            data: [Components.Schemas.Notice],
                            total: Swift.Int
                        ) {
                            self.data = data
                            self.total = total
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case data
                            case total
                        }
                    }
                    /// - Remark: Generated from `#/paths/p1/notify/GET/responses/200/content/application\/json`.
                    case json(Operations.listNotice.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.listNotice.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.listNotice.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.listNotice.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/notify/get(listNotice)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.listNotice.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.listNotice.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/notify/GET/responses/401/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/notify/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.listNotice.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.listNotice.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// 未登录
            ///
            /// - Remark: Generated from `#/paths//p1/notify/get(listNotice)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.listNotice.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.listNotice.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/notify/GET/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/notify/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.listNotice.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.listNotice.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/notify/get(listNotice)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.listNotice.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.listNotice.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 编辑条目的剧集吐槽
    ///
    /// - Remark: HTTP `PUT /p1/subjects/-/episode/-/comments/{commentID}`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/episode/-/comments/{commentID}/put(editSubjectEpComment)`.
    internal enum editSubjectEpComment {
        internal static let id: Swift.String = "editSubjectEpComment"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/subjects/-/episode/-/comments/{commentID}/PUT/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/episode/-/comments/{commentID}/PUT/path/commentID`.
                internal var commentID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - commentID:
                internal init(commentID: Swift.Int) {
                    self.commentID = commentID
                }
            }
            internal var path: Operations.editSubjectEpComment.Input.Path
            /// - Remark: Generated from `#/paths/p1/subjects/-/episode/-/comments/{commentID}/PUT/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.editSubjectEpComment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.editSubjectEpComment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.editSubjectEpComment.Input.Headers
            /// - Remark: Generated from `#/paths/p1/subjects/-/episode/-/comments/{commentID}/PUT/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/episode/-/comments/{commentID}/PUT/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/episode/-/comments/{commentID}/PUT/requestBody/json/content`.
                    internal var content: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - content:
                    internal init(content: Swift.String) {
                        self.content = content
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case content
                    }
                }
                /// - Remark: Generated from `#/paths/p1/subjects/-/episode/-/comments/{commentID}/PUT/requestBody/content/application\/json`.
                case json(Operations.editSubjectEpComment.Input.Body.jsonPayload)
            }
            internal var body: Operations.editSubjectEpComment.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.editSubjectEpComment.Input.Path,
                headers: Operations.editSubjectEpComment.Input.Headers = .init(),
                body: Operations.editSubjectEpComment.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/episode/-/comments/{commentID}/PUT/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/episode/-/comments/{commentID}/PUT/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIObjectContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: OpenAPIRuntime.OpenAPIObjectContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.editSubjectEpComment.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.editSubjectEpComment.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/-/episode/-/comments/{commentID}/put(editSubjectEpComment)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.editSubjectEpComment.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.editSubjectEpComment.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/episode/-/comments/{commentID}/PUT/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/episode/-/comments/{commentID}/PUT/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.editSubjectEpComment.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.editSubjectEpComment.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/-/episode/-/comments/{commentID}/put(editSubjectEpComment)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.editSubjectEpComment.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.editSubjectEpComment.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 删除条目的剧集吐槽
    ///
    /// - Remark: HTTP `DELETE /p1/subjects/-/episode/-/comments/{commentID}`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/episode/-/comments/{commentID}/delete(deleteSubjectEpComment)`.
    internal enum deleteSubjectEpComment {
        internal static let id: Swift.String = "deleteSubjectEpComment"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/subjects/-/episode/-/comments/{commentID}/DELETE/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/episode/-/comments/{commentID}/DELETE/path/commentID`.
                internal var commentID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - commentID:
                internal init(commentID: Swift.Int) {
                    self.commentID = commentID
                }
            }
            internal var path: Operations.deleteSubjectEpComment.Input.Path
            /// - Remark: Generated from `#/paths/p1/subjects/-/episode/-/comments/{commentID}/DELETE/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteSubjectEpComment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteSubjectEpComment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.deleteSubjectEpComment.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.deleteSubjectEpComment.Input.Path,
                headers: Operations.deleteSubjectEpComment.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/episode/-/comments/{commentID}/DELETE/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/episode/-/comments/{commentID}/DELETE/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIObjectContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: OpenAPIRuntime.OpenAPIObjectContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.deleteSubjectEpComment.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.deleteSubjectEpComment.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/-/episode/-/comments/{commentID}/delete(deleteSubjectEpComment)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.deleteSubjectEpComment.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.deleteSubjectEpComment.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/episode/-/comments/{commentID}/DELETE/responses/401/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/episode/-/comments/{commentID}/DELETE/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.deleteSubjectEpComment.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.deleteSubjectEpComment.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/-/episode/-/comments/{commentID}/delete(deleteSubjectEpComment)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.deleteSubjectEpComment.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.deleteSubjectEpComment.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/episode/-/comments/{commentID}/DELETE/responses/404/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/episode/-/comments/{commentID}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.deleteSubjectEpComment.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.deleteSubjectEpComment.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/-/episode/-/comments/{commentID}/delete(deleteSubjectEpComment)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.deleteSubjectEpComment.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.deleteSubjectEpComment.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/episode/-/comments/{commentID}/DELETE/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/episode/-/comments/{commentID}/DELETE/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.deleteSubjectEpComment.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.deleteSubjectEpComment.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/-/episode/-/comments/{commentID}/delete(deleteSubjectEpComment)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.deleteSubjectEpComment.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.deleteSubjectEpComment.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 获取条目的剧集吐槽箱
    ///
    /// - Remark: HTTP `GET /p1/subjects/-/episode/{episodeID}/comments`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/episode/{episodeID}/comments/get(getSubjectEpisodeComments)`.
    internal enum getSubjectEpisodeComments {
        internal static let id: Swift.String = "getSubjectEpisodeComments"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/path/episodeID`.
                internal var episodeID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - episodeID:
                internal init(episodeID: Swift.Int) {
                    self.episodeID = episodeID
                }
            }
            internal var path: Operations.getSubjectEpisodeComments.Input.Path
            /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getSubjectEpisodeComments.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getSubjectEpisodeComments.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getSubjectEpisodeComments.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.getSubjectEpisodeComments.Input.Path,
                headers: Operations.getSubjectEpisodeComments.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/200/content/jsonPayload`.
                    internal struct jsonPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/200/content/jsonPayload/value1`.
                        internal struct Value1Payload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/200/content/jsonPayload/value1/content`.
                            internal var content: Swift.String
                            /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/200/content/jsonPayload/value1/createdAt`.
                            internal var createdAt: Swift.Int
                            /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/200/content/jsonPayload/value1/creatorID`.
                            internal var creatorID: Swift.Int
                            /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/200/content/jsonPayload/value1/epID`.
                            internal var epID: Swift.Int
                            /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/200/content/jsonPayload/value1/id`.
                            internal var id: Swift.Int
                            /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/200/content/jsonPayload/value1/relatedID`.
                            internal var relatedID: Swift.Int
                            /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/200/content/jsonPayload/value1/state`.
                            internal var state: Swift.Int
                            /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/200/content/jsonPayload/value1/user`.
                            internal struct userPayload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/200/content/jsonPayload/value1/user/value1`.
                                internal struct Value1Payload: Codable, Hashable, Sendable {
                                    /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/200/content/jsonPayload/value1/user/value1/avatar`.
                                    internal struct avatarPayload: Codable, Hashable, Sendable {
                                        /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/200/content/jsonPayload/value1/user/value1/avatar/large`.
                                        internal var large: Swift.String
                                        /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/200/content/jsonPayload/value1/user/value1/avatar/medium`.
                                        internal var medium: Swift.String
                                        /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/200/content/jsonPayload/value1/user/value1/avatar/small`.
                                        internal var small: Swift.String
                                        /// Creates a new `avatarPayload`.
                                        ///
                                        /// - Parameters:
                                        ///   - large:
                                        ///   - medium:
                                        ///   - small:
                                        internal init(
                                            large: Swift.String,
                                            medium: Swift.String,
                                            small: Swift.String
                                        ) {
                                            self.large = large
                                            self.medium = medium
                                            self.small = small
                                        }
                                        internal enum CodingKeys: String, CodingKey {
                                            case large
                                            case medium
                                            case small
                                        }
                                    }
                                    /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/200/content/jsonPayload/value1/user/value1/avatar`.
                                    internal var avatar: Operations.getSubjectEpisodeComments.Output.Ok.Body.jsonPayloadPayload.Value1Payload.userPayload.Value1Payload.avatarPayload
                                    /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/200/content/jsonPayload/value1/user/value1/id`.
                                    internal var id: Swift.Int
                                    /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/200/content/jsonPayload/value1/user/value1/nickname`.
                                    internal var nickname: Swift.String
                                    /// Creates a new `Value1Payload`.
                                    ///
                                    /// - Parameters:
                                    ///   - avatar:
                                    ///   - id:
                                    ///   - nickname:
                                    internal init(
                                        avatar: Operations.getSubjectEpisodeComments.Output.Ok.Body.jsonPayloadPayload.Value1Payload.userPayload.Value1Payload.avatarPayload,
                                        id: Swift.Int,
                                        nickname: Swift.String
                                    ) {
                                        self.avatar = avatar
                                        self.id = id
                                        self.nickname = nickname
                                    }
                                    internal enum CodingKeys: String, CodingKey {
                                        case avatar
                                        case id
                                        case nickname
                                    }
                                }
                                /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/200/content/jsonPayload/value1/user/value1`.
                                internal var value1: Operations.getSubjectEpisodeComments.Output.Ok.Body.jsonPayloadPayload.Value1Payload.userPayload.Value1Payload?
                                /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/200/content/jsonPayload/value1/user/value2`.
                                internal var value2: OpenAPIRuntime.OpenAPIValueContainer?
                                /// Creates a new `userPayload`.
                                ///
                                /// - Parameters:
                                ///   - value1:
                                ///   - value2:
                                internal init(
                                    value1: Operations.getSubjectEpisodeComments.Output.Ok.Body.jsonPayloadPayload.Value1Payload.userPayload.Value1Payload? = nil,
                                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                                ) {
                                    self.value1 = value1
                                    self.value2 = value2
                                }
                                internal init(from decoder: any Decoder) throws {
                                    var errors: [any Error] = []
                                    do {
                                        value1 = try .init(from: decoder)
                                    } catch {
                                        errors.append(error)
                                    }
                                    do {
                                        value2 = try .init(from: decoder)
                                    } catch {
                                        errors.append(error)
                                    }
                                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                        [
                                            value1,
                                            value2
                                        ],
                                        type: Self.self,
                                        codingPath: decoder.codingPath,
                                        errors: errors
                                    )
                                }
                                internal func encode(to encoder: any Encoder) throws {
                                    try value1?.encode(to: encoder)
                                    try value2?.encode(to: encoder)
                                }
                            }
                            /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/200/content/jsonPayload/value1/user`.
                            internal var user: Operations.getSubjectEpisodeComments.Output.Ok.Body.jsonPayloadPayload.Value1Payload.userPayload
                            /// Creates a new `Value1Payload`.
                            ///
                            /// - Parameters:
                            ///   - content:
                            ///   - createdAt:
                            ///   - creatorID:
                            ///   - epID:
                            ///   - id:
                            ///   - relatedID:
                            ///   - state:
                            ///   - user:
                            internal init(
                                content: Swift.String,
                                createdAt: Swift.Int,
                                creatorID: Swift.Int,
                                epID: Swift.Int,
                                id: Swift.Int,
                                relatedID: Swift.Int,
                                state: Swift.Int,
                                user: Operations.getSubjectEpisodeComments.Output.Ok.Body.jsonPayloadPayload.Value1Payload.userPayload
                            ) {
                                self.content = content
                                self.createdAt = createdAt
                                self.creatorID = creatorID
                                self.epID = epID
                                self.id = id
                                self.relatedID = relatedID
                                self.state = state
                                self.user = user
                            }
                            internal enum CodingKeys: String, CodingKey {
                                case content
                                case createdAt
                                case creatorID
                                case epID
                                case id
                                case relatedID
                                case state
                                case user
                            }
                        }
                        /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/200/content/jsonPayload/value1`.
                        internal var value1: Operations.getSubjectEpisodeComments.Output.Ok.Body.jsonPayloadPayload.Value1Payload
                        /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/200/content/jsonPayload/value2`.
                        internal struct Value2Payload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/200/content/jsonPayload/value2/replies`.
                            internal var replies: [Components.Schemas.BaseEpisodeComment]
                            /// Creates a new `Value2Payload`.
                            ///
                            /// - Parameters:
                            ///   - replies:
                            internal init(replies: [Components.Schemas.BaseEpisodeComment]) {
                                self.replies = replies
                            }
                            internal enum CodingKeys: String, CodingKey {
                                case replies
                            }
                        }
                        /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/200/content/jsonPayload/value2`.
                        internal var value2: Operations.getSubjectEpisodeComments.Output.Ok.Body.jsonPayloadPayload.Value2Payload
                        /// Creates a new `jsonPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        internal init(
                            value1: Operations.getSubjectEpisodeComments.Output.Ok.Body.jsonPayloadPayload.Value1Payload,
                            value2: Operations.getSubjectEpisodeComments.Output.Ok.Body.jsonPayloadPayload.Value2Payload
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        internal init(from decoder: any Decoder) throws {
                            value1 = try .init(from: decoder)
                            value2 = try .init(from: decoder)
                        }
                        internal func encode(to encoder: any Encoder) throws {
                            try value1.encode(to: encoder)
                            try value2.encode(to: encoder)
                        }
                    }
                    /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/200/content/json`.
                    internal typealias jsonPayload = [Operations.getSubjectEpisodeComments.Output.Ok.Body.jsonPayloadPayload]
                    /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/200/content/application\/json`.
                    case json(Operations.getSubjectEpisodeComments.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.getSubjectEpisodeComments.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getSubjectEpisodeComments.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getSubjectEpisodeComments.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/-/episode/{episodeID}/comments/get(getSubjectEpisodeComments)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getSubjectEpisodeComments.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getSubjectEpisodeComments.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getSubjectEpisodeComments.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getSubjectEpisodeComments.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/-/episode/{episodeID}/comments/get(getSubjectEpisodeComments)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.getSubjectEpisodeComments.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.getSubjectEpisodeComments.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 创建条目的剧集吐槽
    ///
    /// 需要 [turnstile](https://developers.cloudflare.com/turnstile/get-started/client-side-rendering/)
    ///
    /// next.bgm.tv 域名对应的 site-key 为 `0x4AAAAAAABkMYinukE8nzYS`
    ///
    /// dev.bgm38.com 域名使用测试用的 site-key `1x00000000000000000000AA`
    ///
    /// - Remark: HTTP `POST /p1/subjects/-/episode/{episodeID}/comments`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/episode/{episodeID}/comments/post(createSubjectEpComment)`.
    internal enum createSubjectEpComment {
        internal static let id: Swift.String = "createSubjectEpComment"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/POST/path/episodeID`.
                internal var episodeID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - episodeID:
                internal init(episodeID: Swift.Int) {
                    self.episodeID = episodeID
                }
            }
            internal var path: Operations.createSubjectEpComment.Input.Path
            /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createSubjectEpComment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createSubjectEpComment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.createSubjectEpComment.Input.Headers
            /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/POST/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/POST/requestBody/json/cf-turnstile-response`.
                    internal var cf_hyphen_turnstile_hyphen_response: Swift.String
                    /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/POST/requestBody/json/content`.
                    internal var content: Swift.String
                    /// 被回复的吐槽 ID, `0` 代表发送顶层吐槽
                    ///
                    /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/POST/requestBody/json/replyTo`.
                    internal var replyTo: Swift.Int?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cf_hyphen_turnstile_hyphen_response:
                    ///   - content:
                    ///   - replyTo: 被回复的吐槽 ID, `0` 代表发送顶层吐槽
                    internal init(
                        cf_hyphen_turnstile_hyphen_response: Swift.String,
                        content: Swift.String,
                        replyTo: Swift.Int? = nil
                    ) {
                        self.cf_hyphen_turnstile_hyphen_response = cf_hyphen_turnstile_hyphen_response
                        self.content = content
                        self.replyTo = replyTo
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case cf_hyphen_turnstile_hyphen_response = "cf-turnstile-response"
                        case content
                        case replyTo
                    }
                }
                /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/POST/requestBody/content/application\/json`.
                case json(Operations.createSubjectEpComment.Input.Body.jsonPayload)
            }
            internal var body: Operations.createSubjectEpComment.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.createSubjectEpComment.Input.Path,
                headers: Operations.createSubjectEpComment.Input.Headers = .init(),
                body: Operations.createSubjectEpComment.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.BasicReply)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.BasicReply {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.createSubjectEpComment.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.createSubjectEpComment.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/-/episode/{episodeID}/comments/post(createSubjectEpComment)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createSubjectEpComment.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.createSubjectEpComment.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/POST/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/episode/{episodeID}/comments/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.createSubjectEpComment.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.createSubjectEpComment.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/-/episode/{episodeID}/comments/post(createSubjectEpComment)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.createSubjectEpComment.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.createSubjectEpComment.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 获取条目讨论版回复
    ///
    /// - Remark: HTTP `GET /p1/subjects/-/posts/{postID}`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/posts/{postID}/get(getSubjectPost)`.
    internal enum getSubjectPost {
        internal static let id: Swift.String = "getSubjectPost"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/GET/path/postID`.
                internal var postID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - postID:
                internal init(postID: Swift.Int) {
                    self.postID = postID
                }
            }
            internal var path: Operations.getSubjectPost.Input.Path
            /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getSubjectPost.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getSubjectPost.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getSubjectPost.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.getSubjectPost.Input.Path,
                headers: Operations.getSubjectPost.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.GroupReply)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.GroupReply {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getSubjectPost.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getSubjectPost.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/-/posts/{postID}/get(getSubjectPost)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getSubjectPost.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getSubjectPost.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/GET/responses/404/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getSubjectPost.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getSubjectPost.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/-/posts/{postID}/get(getSubjectPost)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.getSubjectPost.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.getSubjectPost.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/GET/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getSubjectPost.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getSubjectPost.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/-/posts/{postID}/get(getSubjectPost)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.getSubjectPost.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.getSubjectPost.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 编辑自己创建的条目讨论版回复
    ///
    /// - Remark: HTTP `PUT /p1/subjects/-/posts/{postID}`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/posts/{postID}/put(editSubjectPost)`.
    internal enum editSubjectPost {
        internal static let id: Swift.String = "editSubjectPost"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/PUT/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/PUT/path/postID`.
                internal var postID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - postID:
                internal init(postID: Swift.Int) {
                    self.postID = postID
                }
            }
            internal var path: Operations.editSubjectPost.Input.Path
            /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/PUT/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.editSubjectPost.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.editSubjectPost.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.editSubjectPost.Input.Headers
            /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/PUT/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/PUT/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/PUT/requestBody/json/text`.
                    internal var text: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - text:
                    internal init(text: Swift.String) {
                        self.text = text
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case text
                    }
                }
                /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/PUT/requestBody/content/application\/json`.
                case json(Operations.editSubjectPost.Input.Body.jsonPayload)
            }
            internal var body: Operations.editSubjectPost.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.editSubjectPost.Input.Path,
                headers: Operations.editSubjectPost.Input.Headers = .init(),
                body: Operations.editSubjectPost.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/PUT/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/PUT/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIObjectContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: OpenAPIRuntime.OpenAPIObjectContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.editSubjectPost.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.editSubjectPost.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/-/posts/{postID}/put(editSubjectPost)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.editSubjectPost.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.editSubjectPost.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/PUT/responses/401/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/PUT/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.editSubjectPost.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.editSubjectPost.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/-/posts/{postID}/put(editSubjectPost)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.editSubjectPost.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.editSubjectPost.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/PUT/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/PUT/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.editSubjectPost.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.editSubjectPost.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/-/posts/{postID}/put(editSubjectPost)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.editSubjectPost.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.editSubjectPost.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 删除自己创建的条目讨论版回复
    ///
    /// - Remark: HTTP `DELETE /p1/subjects/-/posts/{postID}`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/posts/{postID}/delete(deleteSubjectPost)`.
    internal enum deleteSubjectPost {
        internal static let id: Swift.String = "deleteSubjectPost"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/DELETE/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/DELETE/path/postID`.
                internal var postID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - postID:
                internal init(postID: Swift.Int) {
                    self.postID = postID
                }
            }
            internal var path: Operations.deleteSubjectPost.Input.Path
            /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/DELETE/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteSubjectPost.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteSubjectPost.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.deleteSubjectPost.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.deleteSubjectPost.Input.Path,
                headers: Operations.deleteSubjectPost.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/DELETE/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/DELETE/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIObjectContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: OpenAPIRuntime.OpenAPIObjectContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.deleteSubjectPost.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.deleteSubjectPost.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/-/posts/{postID}/delete(deleteSubjectPost)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.deleteSubjectPost.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.deleteSubjectPost.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/DELETE/responses/401/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/DELETE/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.deleteSubjectPost.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.deleteSubjectPost.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/-/posts/{postID}/delete(deleteSubjectPost)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.deleteSubjectPost.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.deleteSubjectPost.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/DELETE/responses/404/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.deleteSubjectPost.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.deleteSubjectPost.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/-/posts/{postID}/delete(deleteSubjectPost)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.deleteSubjectPost.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.deleteSubjectPost.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/DELETE/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/posts/{postID}/DELETE/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.deleteSubjectPost.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.deleteSubjectPost.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/-/posts/{postID}/delete(deleteSubjectPost)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.deleteSubjectPost.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.deleteSubjectPost.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 获取帖子列表
    ///
    /// - Remark: HTTP `GET /p1/subjects/-/topics/{topicID}`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/topics/{topicID}/get(getSubjectTopicDetail)`.
    internal enum getSubjectTopicDetail {
        internal static let id: Swift.String = "getSubjectTopicDetail"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/GET/path/topicID`.
                internal var topicID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - topicID:
                internal init(topicID: Swift.Int) {
                    self.topicID = topicID
                }
            }
            internal var path: Operations.getSubjectTopicDetail.Input.Path
            /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getSubjectTopicDetail.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getSubjectTopicDetail.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getSubjectTopicDetail.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.getSubjectTopicDetail.Input.Path,
                headers: Operations.getSubjectTopicDetail.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.TopicDetail)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.TopicDetail {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getSubjectTopicDetail.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getSubjectTopicDetail.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/-/topics/{topicID}/get(getSubjectTopicDetail)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getSubjectTopicDetail.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getSubjectTopicDetail.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/GET/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getSubjectTopicDetail.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getSubjectTopicDetail.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/-/topics/{topicID}/get(getSubjectTopicDetail)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.getSubjectTopicDetail.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.getSubjectTopicDetail.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 编辑自己创建的条目讨论版
    ///
    /// - Remark: HTTP `PUT /p1/subjects/-/topics/{topicID}`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/topics/{topicID}/put(editSubjectTopic)`.
    internal enum editSubjectTopic {
        internal static let id: Swift.String = "editSubjectTopic"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/PUT/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/PUT/path/topicID`.
                internal var topicID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - topicID:
                internal init(topicID: Swift.Int) {
                    self.topicID = topicID
                }
            }
            internal var path: Operations.editSubjectTopic.Input.Path
            /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/PUT/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.editSubjectTopic.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.editSubjectTopic.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.editSubjectTopic.Input.Headers
            /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/PUT/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.TopicCreation)
            }
            internal var body: Operations.editSubjectTopic.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.editSubjectTopic.Input.Path,
                headers: Operations.editSubjectTopic.Input.Headers = .init(),
                body: Operations.editSubjectTopic.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/PUT/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/PUT/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIObjectContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: OpenAPIRuntime.OpenAPIObjectContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.editSubjectTopic.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.editSubjectTopic.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/-/topics/{topicID}/put(editSubjectTopic)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.editSubjectTopic.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.editSubjectTopic.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/PUT/responses/400/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/PUT/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.editSubjectTopic.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.editSubjectTopic.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/-/topics/{topicID}/put(editSubjectTopic)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.editSubjectTopic.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.editSubjectTopic.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/PUT/responses/401/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/PUT/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.editSubjectTopic.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.editSubjectTopic.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/-/topics/{topicID}/put(editSubjectTopic)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.editSubjectTopic.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.editSubjectTopic.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/PUT/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/PUT/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.editSubjectTopic.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.editSubjectTopic.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/-/topics/{topicID}/put(editSubjectTopic)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.editSubjectTopic.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.editSubjectTopic.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 创建条目讨论版回复
    ///
    /// 需要 [turnstile](https://developers.cloudflare.com/turnstile/get-started/client-side-rendering/)
    ///
    /// next.bgm.tv 域名对应的 site-key 为 `0x4AAAAAAABkMYinukE8nzYS`
    ///
    /// dev.bgm38.com 域名使用测试用的 site-key `1x00000000000000000000AA`
    ///
    /// - Remark: HTTP `POST /p1/subjects/-/topics/{topicID}/replies`.
    /// - Remark: Generated from `#/paths//p1/subjects/-/topics/{topicID}/replies/post(createSubjectReply)`.
    internal enum createSubjectReply {
        internal static let id: Swift.String = "createSubjectReply"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/replies/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/replies/POST/path/topicID`.
                internal var topicID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - topicID:
                internal init(topicID: Swift.Int) {
                    self.topicID = topicID
                }
            }
            internal var path: Operations.createSubjectReply.Input.Path
            /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/replies/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createSubjectReply.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createSubjectReply.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.createSubjectReply.Input.Headers
            /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/replies/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/replies/POST/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/replies/POST/requestBody/json/cf-turnstile-response`.
                    internal var cf_hyphen_turnstile_hyphen_response: Swift.String
                    /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/replies/POST/requestBody/json/content`.
                    internal var content: Swift.String
                    /// 被回复的 topic ID, `0` 代表回复楼主
                    ///
                    /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/replies/POST/requestBody/json/replyTo`.
                    internal var replyTo: Swift.Int?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cf_hyphen_turnstile_hyphen_response:
                    ///   - content:
                    ///   - replyTo: 被回复的 topic ID, `0` 代表回复楼主
                    internal init(
                        cf_hyphen_turnstile_hyphen_response: Swift.String,
                        content: Swift.String,
                        replyTo: Swift.Int? = nil
                    ) {
                        self.cf_hyphen_turnstile_hyphen_response = cf_hyphen_turnstile_hyphen_response
                        self.content = content
                        self.replyTo = replyTo
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case cf_hyphen_turnstile_hyphen_response = "cf-turnstile-response"
                        case content
                        case replyTo
                    }
                }
                /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/replies/POST/requestBody/content/application\/json`.
                case json(Operations.createSubjectReply.Input.Body.jsonPayload)
            }
            internal var body: Operations.createSubjectReply.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.createSubjectReply.Input.Path,
                headers: Operations.createSubjectReply.Input.Headers = .init(),
                body: Operations.createSubjectReply.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/replies/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/replies/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.BasicReply)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.BasicReply {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.createSubjectReply.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.createSubjectReply.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/-/topics/{topicID}/replies/post(createSubjectReply)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createSubjectReply.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.createSubjectReply.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/replies/POST/responses/401/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/replies/POST/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.createSubjectReply.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.createSubjectReply.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/-/topics/{topicID}/replies/post(createSubjectReply)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.createSubjectReply.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.createSubjectReply.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/replies/POST/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/-/topics/{topicID}/replies/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.createSubjectReply.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.createSubjectReply.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/-/topics/{topicID}/replies/post(createSubjectReply)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.createSubjectReply.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.createSubjectReply.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 获取条目的吐槽箱
    ///
    /// - Remark: HTTP `GET /p1/subjects/{subjectID}/comments`.
    /// - Remark: Generated from `#/paths//p1/subjects/{subjectID}/comments/get(subjectComments)`.
    internal enum subjectComments {
        internal static let id: Swift.String = "subjectComments"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/comments/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/comments/GET/path/subjectID`.
                internal var subjectID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - subjectID:
                internal init(subjectID: Swift.Int) {
                    self.subjectID = subjectID
                }
            }
            internal var path: Operations.subjectComments.Input.Path
            /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/comments/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/comments/GET/query/limit`.
                internal var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/comments/GET/query/offset`.
                internal var offset: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit:
                ///   - offset:
                internal init(
                    limit: Swift.Int? = nil,
                    offset: Swift.Int? = nil
                ) {
                    self.limit = limit
                    self.offset = offset
                }
            }
            internal var query: Operations.subjectComments.Input.Query
            /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/comments/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.subjectComments.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.subjectComments.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.subjectComments.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.subjectComments.Input.Path,
                query: Operations.subjectComments.Input.Query = .init(),
                headers: Operations.subjectComments.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/comments/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/comments/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.SubjectInterestComment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.SubjectInterestComment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.subjectComments.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.subjectComments.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/{subjectID}/comments/get(subjectComments)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.subjectComments.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.subjectComments.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/comments/GET/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/comments/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.subjectComments.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.subjectComments.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/{subjectID}/comments/get(subjectComments)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.subjectComments.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.subjectComments.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 获取条目讨论版列表
    ///
    /// - Remark: HTTP `GET /p1/subjects/{subjectID}/topics`.
    /// - Remark: Generated from `#/paths//p1/subjects/{subjectID}/topics/get(getSubjectTopicsBySubjectId)`.
    internal enum getSubjectTopicsBySubjectId {
        internal static let id: Swift.String = "getSubjectTopicsBySubjectId"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/topics/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/topics/GET/path/subjectID`.
                internal var subjectID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - subjectID:
                internal init(subjectID: Swift.Int) {
                    self.subjectID = subjectID
                }
            }
            internal var path: Operations.getSubjectTopicsBySubjectId.Input.Path
            /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/topics/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/topics/GET/query/limit`.
                internal var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/topics/GET/query/offset`.
                internal var offset: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit:
                ///   - offset:
                internal init(
                    limit: Swift.Int? = nil,
                    offset: Swift.Int? = nil
                ) {
                    self.limit = limit
                    self.offset = offset
                }
            }
            internal var query: Operations.getSubjectTopicsBySubjectId.Input.Query
            /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/topics/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getSubjectTopicsBySubjectId.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getSubjectTopicsBySubjectId.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getSubjectTopicsBySubjectId.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.getSubjectTopicsBySubjectId.Input.Path,
                query: Operations.getSubjectTopicsBySubjectId.Input.Query = .init(),
                headers: Operations.getSubjectTopicsBySubjectId.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/topics/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/topics/GET/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/topics/GET/responses/200/content/json/data`.
                        internal var data: [Components.Schemas.Topic]
                        /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/topics/GET/responses/200/content/json/total`.
                        internal var total: Swift.Int
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - data:
                        ///   - total:
                        internal init(
                            data: [Components.Schemas.Topic],
                            total: Swift.Int
                        ) {
                            self.data = data
                            self.total = total
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case data
                            case total
                        }
                    }
                    /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/topics/GET/responses/200/content/application\/json`.
                    case json(Operations.getSubjectTopicsBySubjectId.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.getSubjectTopicsBySubjectId.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getSubjectTopicsBySubjectId.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getSubjectTopicsBySubjectId.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/{subjectID}/topics/get(getSubjectTopicsBySubjectId)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getSubjectTopicsBySubjectId.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getSubjectTopicsBySubjectId.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/topics/GET/responses/404/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/topics/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getSubjectTopicsBySubjectId.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getSubjectTopicsBySubjectId.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// 条目不存在
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/{subjectID}/topics/get(getSubjectTopicsBySubjectId)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.getSubjectTopicsBySubjectId.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.getSubjectTopicsBySubjectId.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/topics/GET/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/topics/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getSubjectTopicsBySubjectId.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getSubjectTopicsBySubjectId.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/{subjectID}/topics/get(getSubjectTopicsBySubjectId)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.getSubjectTopicsBySubjectId.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.getSubjectTopicsBySubjectId.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 创建条目讨论版
    ///
    /// 需要 [turnstile](https://developers.cloudflare.com/turnstile/get-started/client-side-rendering/)
    ///
    /// next.bgm.tv 域名对应的 site-key 为 `0x4AAAAAAABkMYinukE8nzYS`
    ///
    /// dev.bgm38.com 域名使用测试用的 site-key `1x00000000000000000000AA`
    ///
    /// - Remark: HTTP `POST /p1/subjects/{subjectID}/topics`.
    /// - Remark: Generated from `#/paths//p1/subjects/{subjectID}/topics/post(createNewSubjectTopic)`.
    internal enum createNewSubjectTopic {
        internal static let id: Swift.String = "createNewSubjectTopic"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/topics/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/topics/POST/path/subjectID`.
                internal var subjectID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - subjectID:
                internal init(subjectID: Swift.Int) {
                    self.subjectID = subjectID
                }
            }
            internal var path: Operations.createNewSubjectTopic.Input.Path
            /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/topics/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createNewSubjectTopic.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createNewSubjectTopic.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.createNewSubjectTopic.Input.Headers
            /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/topics/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/topics/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.TopicCreation)
            }
            internal var body: Operations.createNewSubjectTopic.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.createNewSubjectTopic.Input.Path,
                headers: Operations.createNewSubjectTopic.Input.Headers = .init(),
                body: Operations.createNewSubjectTopic.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/topics/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/topics/POST/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// new topic id
                        ///
                        /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/topics/POST/responses/200/content/json/id`.
                        internal var id: Swift.Int
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - id: new topic id
                        internal init(id: Swift.Int) {
                            self.id = id
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/topics/POST/responses/200/content/application\/json`.
                    case json(Operations.createNewSubjectTopic.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.createNewSubjectTopic.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.createNewSubjectTopic.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.createNewSubjectTopic.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/{subjectID}/topics/post(createNewSubjectTopic)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createNewSubjectTopic.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.createNewSubjectTopic.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/topics/POST/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/subjects/{subjectID}/topics/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.createNewSubjectTopic.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.createNewSubjectTopic.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/subjects/{subjectID}/topics/post(createNewSubjectTopic)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.createNewSubjectTopic.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.createNewSubjectTopic.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /p1/wiki/ep/{episodeID}`.
    /// - Remark: Generated from `#/paths//p1/wiki/ep/{episodeID}/get(getEpisodeWikiInfo)`.
    internal enum getEpisodeWikiInfo {
        internal static let id: Swift.String = "getEpisodeWikiInfo"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/GET/path/episodeID`.
                internal var episodeID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - episodeID:
                internal init(episodeID: Swift.Int) {
                    self.episodeID = episodeID
                }
            }
            internal var path: Operations.getEpisodeWikiInfo.Input.Path
            /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getEpisodeWikiInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getEpisodeWikiInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getEpisodeWikiInfo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.getEpisodeWikiInfo.Input.Path,
                headers: Operations.getEpisodeWikiInfo.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.EpisodeWikiInfo)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.EpisodeWikiInfo {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getEpisodeWikiInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getEpisodeWikiInfo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/ep/{episodeID}/get(getEpisodeWikiInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getEpisodeWikiInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getEpisodeWikiInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/GET/responses/404/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getEpisodeWikiInfo.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getEpisodeWikiInfo.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/ep/{episodeID}/get(getEpisodeWikiInfo)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.getEpisodeWikiInfo.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.getEpisodeWikiInfo.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/GET/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getEpisodeWikiInfo.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getEpisodeWikiInfo.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/ep/{episodeID}/get(getEpisodeWikiInfo)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.getEpisodeWikiInfo.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.getEpisodeWikiInfo.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `PATCH /p1/wiki/ep/{episodeID}`.
    /// - Remark: Generated from `#/paths//p1/wiki/ep/{episodeID}/patch(patchEpisodeWikiInfo)`.
    internal enum patchEpisodeWikiInfo {
        internal static let id: Swift.String = "patchEpisodeWikiInfo"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/path/episodeID`.
                internal var episodeID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - episodeID:
                internal init(episodeID: Swift.Int) {
                    self.episodeID = episodeID
                }
            }
            internal var path: Operations.patchEpisodeWikiInfo.Input.Path
            /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.patchEpisodeWikiInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.patchEpisodeWikiInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.patchEpisodeWikiInfo.Input.Headers
            /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/requestBody/json/commitMessage`.
                    internal var commitMessage: Swift.String
                    /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/requestBody/json/episode`.
                    internal struct episodePayload: Codable, Hashable, Sendable {
                        /// YYYY-MM-DD
                        ///
                        /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/requestBody/json/episode/date`.
                        internal var date: Swift.String?
                        /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/requestBody/json/episode/duration`.
                        internal var duration: Swift.String?
                        /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/requestBody/json/episode/ep`.
                        internal var ep: Swift.Double?
                        /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/requestBody/json/episode/name`.
                        internal var name: Swift.String?
                        /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/requestBody/json/episode/nameCN`.
                        internal var nameCN: Swift.String?
                        /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/requestBody/json/episode/subjectID`.
                        internal var subjectID: Swift.Int?
                        /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/requestBody/json/episode/summary`.
                        internal var summary: Swift.String?
                        /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/requestBody/json/episode/type`.
                        internal struct _typePayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/requestBody/json/episode/type/value1`.
                            internal var value1: Swift.Double?
                            /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/requestBody/json/episode/type/value2`.
                            internal var value2: Swift.Double?
                            /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/requestBody/json/episode/type/value3`.
                            internal var value3: Swift.Double?
                            /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/requestBody/json/episode/type/value4`.
                            internal var value4: Swift.Double?
                            /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/requestBody/json/episode/type/value5`.
                            internal var value5: Swift.Double?
                            /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/requestBody/json/episode/type/value6`.
                            internal var value6: Swift.Double?
                            /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/requestBody/json/episode/type/value7`.
                            internal var value7: Swift.Double?
                            /// Creates a new `_typePayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            ///   - value5:
                            ///   - value6:
                            ///   - value7:
                            internal init(
                                value1: Swift.Double? = nil,
                                value2: Swift.Double? = nil,
                                value3: Swift.Double? = nil,
                                value4: Swift.Double? = nil,
                                value5: Swift.Double? = nil,
                                value6: Swift.Double? = nil,
                                value7: Swift.Double? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                                self.value5 = value5
                                self.value6 = value6
                                self.value7 = value7
                            }
                            internal init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    value1 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    value3 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    value4 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    value5 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    value6 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    value7 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        value1,
                                        value2,
                                        value3,
                                        value4,
                                        value5,
                                        value6,
                                        value7
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            internal func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    value1,
                                    value2,
                                    value3,
                                    value4,
                                    value5,
                                    value6,
                                    value7
                                ])
                            }
                        }
                        /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/requestBody/json/episode/type`.
                        internal var _type: Operations.patchEpisodeWikiInfo.Input.Body.jsonPayload.episodePayload._typePayload?
                        /// Creates a new `episodePayload`.
                        ///
                        /// - Parameters:
                        ///   - date: YYYY-MM-DD
                        ///   - duration:
                        ///   - ep:
                        ///   - name:
                        ///   - nameCN:
                        ///   - subjectID:
                        ///   - summary:
                        ///   - _type:
                        internal init(
                            date: Swift.String? = nil,
                            duration: Swift.String? = nil,
                            ep: Swift.Double? = nil,
                            name: Swift.String? = nil,
                            nameCN: Swift.String? = nil,
                            subjectID: Swift.Int? = nil,
                            summary: Swift.String? = nil,
                            _type: Operations.patchEpisodeWikiInfo.Input.Body.jsonPayload.episodePayload._typePayload? = nil
                        ) {
                            self.date = date
                            self.duration = duration
                            self.ep = ep
                            self.name = name
                            self.nameCN = nameCN
                            self.subjectID = subjectID
                            self.summary = summary
                            self._type = _type
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case date
                            case duration
                            case ep
                            case name
                            case nameCN
                            case subjectID
                            case summary
                            case _type = "type"
                        }
                    }
                    /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/requestBody/json/episode`.
                    internal var episode: Operations.patchEpisodeWikiInfo.Input.Body.jsonPayload.episodePayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - commitMessage:
                    ///   - episode:
                    internal init(
                        commitMessage: Swift.String,
                        episode: Operations.patchEpisodeWikiInfo.Input.Body.jsonPayload.episodePayload
                    ) {
                        self.commitMessage = commitMessage
                        self.episode = episode
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case commitMessage
                        case episode
                    }
                }
                /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/requestBody/content/application\/json`.
                case json(Operations.patchEpisodeWikiInfo.Input.Body.jsonPayload)
            }
            internal var body: Operations.patchEpisodeWikiInfo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.patchEpisodeWikiInfo.Input.Path,
                headers: Operations.patchEpisodeWikiInfo.Input.Headers = .init(),
                body: Operations.patchEpisodeWikiInfo.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIObjectContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: OpenAPIRuntime.OpenAPIObjectContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.patchEpisodeWikiInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.patchEpisodeWikiInfo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/ep/{episodeID}/patch(patchEpisodeWikiInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.patchEpisodeWikiInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.patchEpisodeWikiInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/responses/400/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.patchEpisodeWikiInfo.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.patchEpisodeWikiInfo.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// invalid input
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/ep/{episodeID}/patch(patchEpisodeWikiInfo)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.patchEpisodeWikiInfo.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.patchEpisodeWikiInfo.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/responses/404/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.patchEpisodeWikiInfo.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.patchEpisodeWikiInfo.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/ep/{episodeID}/patch(patchEpisodeWikiInfo)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.patchEpisodeWikiInfo.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.patchEpisodeWikiInfo.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/ep/{episodeID}/PATCH/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.patchEpisodeWikiInfo.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.patchEpisodeWikiInfo.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/ep/{episodeID}/patch(patchEpisodeWikiInfo)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.patchEpisodeWikiInfo.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.patchEpisodeWikiInfo.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `POST /p1/wiki/lock/subjects`.
    /// - Remark: Generated from `#/paths//p1/wiki/lock/subjects/post(lockSubject)`.
    internal enum lockSubject {
        internal static let id: Swift.String = "lockSubject"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/wiki/lock/subjects/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.lockSubject.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.lockSubject.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.lockSubject.Input.Headers
            /// - Remark: Generated from `#/paths/p1/wiki/lock/subjects/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/lock/subjects/POST/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/p1/wiki/lock/subjects/POST/requestBody/json/reason`.
                    internal var reason: Swift.String
                    /// - Remark: Generated from `#/paths/p1/wiki/lock/subjects/POST/requestBody/json/subjectID`.
                    internal var subjectID: Swift.Int
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - reason:
                    ///   - subjectID:
                    internal init(
                        reason: Swift.String,
                        subjectID: Swift.Int
                    ) {
                        self.reason = reason
                        self.subjectID = subjectID
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case reason
                        case subjectID
                    }
                }
                /// - Remark: Generated from `#/paths/p1/wiki/lock/subjects/POST/requestBody/content/application\/json`.
                case json(Operations.lockSubject.Input.Body.jsonPayload)
            }
            internal var body: Operations.lockSubject.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.lockSubject.Input.Headers = .init(),
                body: Operations.lockSubject.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/lock/subjects/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/lock/subjects/POST/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIObjectContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: OpenAPIRuntime.OpenAPIObjectContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.lockSubject.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.lockSubject.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/lock/subjects/post(lockSubject)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.lockSubject.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.lockSubject.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/lock/subjects/POST/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/lock/subjects/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.lockSubject.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.lockSubject.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/lock/subjects/post(lockSubject)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.lockSubject.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.lockSubject.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 获取当前的 wiki 信息
    ///
    /// - Remark: HTTP `GET /p1/wiki/persons/{personID}`.
    /// - Remark: Generated from `#/paths//p1/wiki/persons/{personID}/get(getPersonWikiInfo)`.
    internal enum getPersonWikiInfo {
        internal static let id: Swift.String = "getPersonWikiInfo"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/GET/path/personID`.
                internal var personID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - personID:
                internal init(personID: Swift.Int) {
                    self.personID = personID
                }
            }
            internal var path: Operations.getPersonWikiInfo.Input.Path
            /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getPersonWikiInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getPersonWikiInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getPersonWikiInfo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.getPersonWikiInfo.Input.Path,
                headers: Operations.getPersonWikiInfo.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.SubjectWikiInfo)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.SubjectWikiInfo {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getPersonWikiInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getPersonWikiInfo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/persons/{personID}/get(getPersonWikiInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getPersonWikiInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getPersonWikiInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/GET/responses/401/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getPersonWikiInfo.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getPersonWikiInfo.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/persons/{personID}/get(getPersonWikiInfo)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.getPersonWikiInfo.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.getPersonWikiInfo.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/GET/responses/404/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getPersonWikiInfo.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getPersonWikiInfo.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// 角色不存在
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/persons/{personID}/get(getPersonWikiInfo)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.getPersonWikiInfo.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.getPersonWikiInfo.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/GET/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getPersonWikiInfo.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getPersonWikiInfo.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/persons/{personID}/get(getPersonWikiInfo)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.getPersonWikiInfo.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.getPersonWikiInfo.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `PATCH /p1/wiki/persons/{personID}`.
    /// - Remark: Generated from `#/paths//p1/wiki/persons/{personID}/patch(patchPersonInfo)`.
    internal enum patchPersonInfo {
        internal static let id: Swift.String = "patchPersonInfo"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/PATCH/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/PATCH/path/personID`.
                internal var personID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - personID:
                internal init(personID: Swift.Int) {
                    self.personID = personID
                }
            }
            internal var path: Operations.patchPersonInfo.Input.Path
            /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/PATCH/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.patchPersonInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.patchPersonInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.patchPersonInfo.Input.Headers
            /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/PATCH/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/PATCH/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/PATCH/requestBody/json/commitMessage`.
                    internal var commitMessage: Swift.String
                    /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/PATCH/requestBody/json/expectedRevision`.
                    internal struct expectedRevisionPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/PATCH/requestBody/json/expectedRevision/infobox`.
                        internal var infobox: Swift.String?
                        /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/PATCH/requestBody/json/expectedRevision/name`.
                        internal var name: Swift.String?
                        /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/PATCH/requestBody/json/expectedRevision/summary`.
                        internal var summary: Swift.String?
                        /// Creates a new `expectedRevisionPayload`.
                        ///
                        /// - Parameters:
                        ///   - infobox:
                        ///   - name:
                        ///   - summary:
                        internal init(
                            infobox: Swift.String? = nil,
                            name: Swift.String? = nil,
                            summary: Swift.String? = nil
                        ) {
                            self.infobox = infobox
                            self.name = name
                            self.summary = summary
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case infobox
                            case name
                            case summary
                        }
                        internal init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            infobox = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .infobox
                            )
                            name = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .name
                            )
                            summary = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .summary
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "infobox",
                                "name",
                                "summary"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/PATCH/requestBody/json/expectedRevision`.
                    internal var expectedRevision: Operations.patchPersonInfo.Input.Body.jsonPayload.expectedRevisionPayload
                    /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/PATCH/requestBody/json/person`.
                    internal struct personPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/PATCH/requestBody/json/person/infobox`.
                        internal var infobox: Swift.String?
                        /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/PATCH/requestBody/json/person/name`.
                        internal var name: Swift.String?
                        /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/PATCH/requestBody/json/person/summary`.
                        internal var summary: Swift.String?
                        /// Creates a new `personPayload`.
                        ///
                        /// - Parameters:
                        ///   - infobox:
                        ///   - name:
                        ///   - summary:
                        internal init(
                            infobox: Swift.String? = nil,
                            name: Swift.String? = nil,
                            summary: Swift.String? = nil
                        ) {
                            self.infobox = infobox
                            self.name = name
                            self.summary = summary
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case infobox
                            case name
                            case summary
                        }
                        internal init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            infobox = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .infobox
                            )
                            name = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .name
                            )
                            summary = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .summary
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "infobox",
                                "name",
                                "summary"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/PATCH/requestBody/json/person`.
                    internal var person: Operations.patchPersonInfo.Input.Body.jsonPayload.personPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - commitMessage:
                    ///   - expectedRevision:
                    ///   - person:
                    internal init(
                        commitMessage: Swift.String,
                        expectedRevision: Operations.patchPersonInfo.Input.Body.jsonPayload.expectedRevisionPayload,
                        person: Operations.patchPersonInfo.Input.Body.jsonPayload.personPayload
                    ) {
                        self.commitMessage = commitMessage
                        self.expectedRevision = expectedRevision
                        self.person = person
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case commitMessage
                        case expectedRevision
                        case person
                    }
                    internal init(from decoder: any Decoder) throws {
                        let container = try decoder.container(keyedBy: CodingKeys.self)
                        commitMessage = try container.decode(
                            Swift.String.self,
                            forKey: .commitMessage
                        )
                        expectedRevision = try container.decode(
                            Operations.patchPersonInfo.Input.Body.jsonPayload.expectedRevisionPayload.self,
                            forKey: .expectedRevision
                        )
                        person = try container.decode(
                            Operations.patchPersonInfo.Input.Body.jsonPayload.personPayload.self,
                            forKey: .person
                        )
                        try decoder.ensureNoAdditionalProperties(knownKeys: [
                            "commitMessage",
                            "expectedRevision",
                            "person"
                        ])
                    }
                }
                /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/PATCH/requestBody/content/application\/json`.
                case json(Operations.patchPersonInfo.Input.Body.jsonPayload)
            }
            internal var body: Operations.patchPersonInfo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.patchPersonInfo.Input.Path,
                headers: Operations.patchPersonInfo.Input.Headers = .init(),
                body: Operations.patchPersonInfo.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/PATCH/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/PATCH/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIObjectContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: OpenAPIRuntime.OpenAPIObjectContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.patchPersonInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.patchPersonInfo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/persons/{personID}/patch(patchPersonInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.patchPersonInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.patchPersonInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/PATCH/responses/400/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/PATCH/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.patchPersonInfo.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.patchPersonInfo.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/persons/{personID}/patch(patchPersonInfo)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.patchPersonInfo.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.patchPersonInfo.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/PATCH/responses/401/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/PATCH/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.patchPersonInfo.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.patchPersonInfo.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/persons/{personID}/patch(patchPersonInfo)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.patchPersonInfo.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.patchPersonInfo.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/PATCH/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/persons/{personID}/PATCH/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.patchPersonInfo.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.patchPersonInfo.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/persons/{personID}/patch(patchPersonInfo)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.patchPersonInfo.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.patchPersonInfo.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 获取最近两天的wiki更新
    ///
    /// - Remark: HTTP `GET /p1/wiki/recent`.
    /// - Remark: Generated from `#/paths//p1/wiki/recent/get(getRecentWiki)`.
    internal enum getRecentWiki {
        internal static let id: Swift.String = "getRecentWiki"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/wiki/recent/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// unix time stamp, only return last update time >= since
                ///
                /// only allow recent 2 days
                ///
                /// - Remark: Generated from `#/paths/p1/wiki/recent/GET/path/since`.
                internal var since: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - since: unix time stamp, only return last update time >= since
                internal init(since: Swift.Int) {
                    self.since = since
                }
            }
            internal var path: Operations.getRecentWiki.Input.Path
            /// - Remark: Generated from `#/paths/p1/wiki/recent/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRecentWiki.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRecentWiki.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getRecentWiki.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.getRecentWiki.Input.Path,
                headers: Operations.getRecentWiki.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/recent/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/recent/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.RecentWikiChange)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.RecentWikiChange {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getRecentWiki.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getRecentWiki.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/recent/get(getRecentWiki)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getRecentWiki.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getRecentWiki.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/recent/GET/responses/401/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/recent/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getRecentWiki.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getRecentWiki.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/recent/get(getRecentWiki)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.getRecentWiki.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.getRecentWiki.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/recent/GET/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/recent/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getRecentWiki.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getRecentWiki.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/recent/get(getRecentWiki)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.getRecentWiki.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.getRecentWiki.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 创建新条目
    ///
    /// - Remark: HTTP `POST /p1/wiki/subjects`.
    /// - Remark: Generated from `#/paths//p1/wiki/subjects/post(createNewSubject)`.
    internal enum createNewSubject {
        internal static let id: Swift.String = "createNewSubject"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/wiki/subjects/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createNewSubject.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createNewSubject.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.createNewSubject.Input.Headers
            /// - Remark: Generated from `#/paths/p1/wiki/subjects/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/POST/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/POST/requestBody/json/infobox`.
                    internal var infobox: Swift.String
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/POST/requestBody/json/name`.
                    internal var name: Swift.String
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/POST/requestBody/json/nsfw`.
                    internal var nsfw: Swift.Bool
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/POST/requestBody/json/platform`.
                    internal var platform: Swift.Int
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/POST/requestBody/json/summary`.
                    internal var summary: Swift.String
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/POST/requestBody/json/type`.
                    internal struct _typePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/p1/wiki/subjects/POST/requestBody/json/type/value1`.
                        internal var value1: Swift.Double?
                        /// - Remark: Generated from `#/paths/p1/wiki/subjects/POST/requestBody/json/type/value2`.
                        internal var value2: Swift.Double?
                        /// - Remark: Generated from `#/paths/p1/wiki/subjects/POST/requestBody/json/type/value3`.
                        internal var value3: Swift.Double?
                        /// - Remark: Generated from `#/paths/p1/wiki/subjects/POST/requestBody/json/type/value4`.
                        internal var value4: Swift.Double?
                        /// - Remark: Generated from `#/paths/p1/wiki/subjects/POST/requestBody/json/type/value5`.
                        internal var value5: Swift.Double?
                        /// Creates a new `_typePayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        ///   - value4:
                        ///   - value5:
                        internal init(
                            value1: Swift.Double? = nil,
                            value2: Swift.Double? = nil,
                            value3: Swift.Double? = nil,
                            value4: Swift.Double? = nil,
                            value5: Swift.Double? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                            self.value4 = value4
                            self.value5 = value5
                        }
                        internal init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                value3 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                value4 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                value5 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    value1,
                                    value2,
                                    value3,
                                    value4,
                                    value5
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        internal func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                value1,
                                value2,
                                value3,
                                value4,
                                value5
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/POST/requestBody/json/type`.
                    internal var _type: Operations.createNewSubject.Input.Body.jsonPayload._typePayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - infobox:
                    ///   - name:
                    ///   - nsfw:
                    ///   - platform:
                    ///   - summary:
                    ///   - _type:
                    internal init(
                        infobox: Swift.String,
                        name: Swift.String,
                        nsfw: Swift.Bool,
                        platform: Swift.Int,
                        summary: Swift.String,
                        _type: Operations.createNewSubject.Input.Body.jsonPayload._typePayload
                    ) {
                        self.infobox = infobox
                        self.name = name
                        self.nsfw = nsfw
                        self.platform = platform
                        self.summary = summary
                        self._type = _type
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case infobox
                        case name
                        case nsfw
                        case platform
                        case summary
                        case _type = "type"
                    }
                }
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/POST/requestBody/content/application\/json`.
                case json(Operations.createNewSubject.Input.Body.jsonPayload)
            }
            internal var body: Operations.createNewSubject.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.createNewSubject.Input.Headers = .init(),
                body: Operations.createNewSubject.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/POST/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/p1/wiki/subjects/POST/responses/200/content/json/subjectID`.
                        internal var subjectID: Swift.Double
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - subjectID:
                        internal init(subjectID: Swift.Double) {
                            self.subjectID = subjectID
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case subjectID
                        }
                    }
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/POST/responses/200/content/application\/json`.
                    case json(Operations.createNewSubject.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.createNewSubject.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.createNewSubject.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.createNewSubject.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/subjects/post(createNewSubject)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createNewSubject.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.createNewSubject.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/POST/responses/400/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.createNewSubject.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.createNewSubject.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/subjects/post(createNewSubject)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.createNewSubject.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.createNewSubject.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/POST/responses/401/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/POST/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.createNewSubject.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.createNewSubject.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/subjects/post(createNewSubject)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.createNewSubject.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.createNewSubject.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/POST/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.createNewSubject.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.createNewSubject.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/subjects/post(createNewSubject)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.createNewSubject.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.createNewSubject.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 获取当前的 wiki 信息
    ///
    /// - Remark: HTTP `GET /p1/wiki/subjects/{subjectID}`.
    /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/get(subjectInfo)`.
    internal enum subjectInfo {
        internal static let id: Swift.String = "subjectInfo"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/GET/path/subjectID`.
                internal var subjectID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - subjectID:
                internal init(subjectID: Swift.Int) {
                    self.subjectID = subjectID
                }
            }
            internal var path: Operations.subjectInfo.Input.Path
            /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.subjectInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.subjectInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.subjectInfo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.subjectInfo.Input.Path,
                headers: Operations.subjectInfo.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.SubjectWikiInfo)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.SubjectWikiInfo {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.subjectInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.subjectInfo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/get(subjectInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.subjectInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.subjectInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/GET/responses/401/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.subjectInfo.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.subjectInfo.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/get(subjectInfo)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.subjectInfo.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.subjectInfo.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/GET/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.subjectInfo.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.subjectInfo.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/get(subjectInfo)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.subjectInfo.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.subjectInfo.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `PATCH /p1/wiki/subjects/{subjectID}`.
    /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/patch(patchSubjectInfo)`.
    internal enum patchSubjectInfo {
        internal static let id: Swift.String = "patchSubjectInfo"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PATCH/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PATCH/path/subjectID`.
                internal var subjectID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - subjectID:
                internal init(subjectID: Swift.Int) {
                    self.subjectID = subjectID
                }
            }
            internal var path: Operations.patchSubjectInfo.Input.Path
            /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PATCH/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.patchSubjectInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.patchSubjectInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.patchSubjectInfo.Input.Headers
            /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PATCH/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PATCH/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PATCH/requestBody/json/commitMessage`.
                    internal var commitMessage: Swift.String
                    /// a optional object to check if input is changed by others
                    /// if `infobox` is given, and current data in database doesn't match input, subject will not be changed
                    ///
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PATCH/requestBody/json/expectedRevision`.
                    internal struct expectedRevisionPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PATCH/requestBody/json/expectedRevision/infobox`.
                        internal var infobox: Swift.String?
                        /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PATCH/requestBody/json/expectedRevision/name`.
                        internal var name: Swift.String?
                        /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PATCH/requestBody/json/expectedRevision/platform`.
                        internal var platform: Swift.Int?
                        /// Creates a new `expectedRevisionPayload`.
                        ///
                        /// - Parameters:
                        ///   - infobox:
                        ///   - name:
                        ///   - platform:
                        internal init(
                            infobox: Swift.String? = nil,
                            name: Swift.String? = nil,
                            platform: Swift.Int? = nil
                        ) {
                            self.infobox = infobox
                            self.name = name
                            self.platform = platform
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case infobox
                            case name
                            case platform
                        }
                    }
                    /// a optional object to check if input is changed by others
                    /// if `infobox` is given, and current data in database doesn't match input, subject will not be changed
                    ///
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PATCH/requestBody/json/expectedRevision`.
                    internal var expectedRevision: Operations.patchSubjectInfo.Input.Body.jsonPayload.expectedRevisionPayload?
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PATCH/requestBody/json/subject`.
                    internal struct subjectPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PATCH/requestBody/json/subject/date`.
                        internal var date: Swift.String?
                        /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PATCH/requestBody/json/subject/infobox`.
                        internal var infobox: Swift.String?
                        /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PATCH/requestBody/json/subject/name`.
                        internal var name: Swift.String?
                        /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PATCH/requestBody/json/subject/nsfw`.
                        internal var nsfw: Swift.Bool?
                        /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PATCH/requestBody/json/subject/platform`.
                        internal var platform: Swift.Int?
                        /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PATCH/requestBody/json/subject/summary`.
                        internal var summary: Swift.String?
                        /// Creates a new `subjectPayload`.
                        ///
                        /// - Parameters:
                        ///   - date:
                        ///   - infobox:
                        ///   - name:
                        ///   - nsfw:
                        ///   - platform:
                        ///   - summary:
                        internal init(
                            date: Swift.String? = nil,
                            infobox: Swift.String? = nil,
                            name: Swift.String? = nil,
                            nsfw: Swift.Bool? = nil,
                            platform: Swift.Int? = nil,
                            summary: Swift.String? = nil
                        ) {
                            self.date = date
                            self.infobox = infobox
                            self.name = name
                            self.nsfw = nsfw
                            self.platform = platform
                            self.summary = summary
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case date
                            case infobox
                            case name
                            case nsfw
                            case platform
                            case summary
                        }
                    }
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PATCH/requestBody/json/subject`.
                    internal var subject: Operations.patchSubjectInfo.Input.Body.jsonPayload.subjectPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - commitMessage:
                    ///   - expectedRevision: a optional object to check if input is changed by others
                    ///   - subject:
                    internal init(
                        commitMessage: Swift.String,
                        expectedRevision: Operations.patchSubjectInfo.Input.Body.jsonPayload.expectedRevisionPayload? = nil,
                        subject: Operations.patchSubjectInfo.Input.Body.jsonPayload.subjectPayload
                    ) {
                        self.commitMessage = commitMessage
                        self.expectedRevision = expectedRevision
                        self.subject = subject
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case commitMessage
                        case expectedRevision
                        case subject
                    }
                }
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PATCH/requestBody/content/application\/json`.
                case json(Operations.patchSubjectInfo.Input.Body.jsonPayload)
            }
            internal var body: Operations.patchSubjectInfo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.patchSubjectInfo.Input.Path,
                headers: Operations.patchSubjectInfo.Input.Headers = .init(),
                body: Operations.patchSubjectInfo.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/patch(patchSubjectInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.patchSubjectInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.patchSubjectInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PATCH/responses/401/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PATCH/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.patchSubjectInfo.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.patchSubjectInfo.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/patch(patchSubjectInfo)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.patchSubjectInfo.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.patchSubjectInfo.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PATCH/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PATCH/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.patchSubjectInfo.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.patchSubjectInfo.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/patch(patchSubjectInfo)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.patchSubjectInfo.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.patchSubjectInfo.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 需要 `subjectWikiEdit` 权限
    ///
    /// - Remark: HTTP `PUT /p1/wiki/subjects/{subjectID}`.
    /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/put(putSubjectInfo)`.
    internal enum putSubjectInfo {
        internal static let id: Swift.String = "putSubjectInfo"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PUT/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PUT/path/subjectID`.
                internal var subjectID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - subjectID:
                internal init(subjectID: Swift.Int) {
                    self.subjectID = subjectID
                }
            }
            internal var path: Operations.putSubjectInfo.Input.Path
            /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PUT/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.putSubjectInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.putSubjectInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.putSubjectInfo.Input.Headers
            /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PUT/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PUT/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PUT/requestBody/json/commitMessage`.
                    internal var commitMessage: Swift.String
                    /// a optional object to check if input is changed by others
                    /// if `infobox` is given, and current data in database doesn't match input, subject will not be changed
                    ///
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PUT/requestBody/json/expectedRevision`.
                    internal struct expectedRevisionPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PUT/requestBody/json/expectedRevision/infobox`.
                        internal var infobox: Swift.String?
                        /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PUT/requestBody/json/expectedRevision/name`.
                        internal var name: Swift.String?
                        /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PUT/requestBody/json/expectedRevision/platform`.
                        internal var platform: Swift.Int?
                        /// Creates a new `expectedRevisionPayload`.
                        ///
                        /// - Parameters:
                        ///   - infobox:
                        ///   - name:
                        ///   - platform:
                        internal init(
                            infobox: Swift.String? = nil,
                            name: Swift.String? = nil,
                            platform: Swift.Int? = nil
                        ) {
                            self.infobox = infobox
                            self.name = name
                            self.platform = platform
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case infobox
                            case name
                            case platform
                        }
                    }
                    /// a optional object to check if input is changed by others
                    /// if `infobox` is given, and current data in database doesn't match input, subject will not be changed
                    ///
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PUT/requestBody/json/expectedRevision`.
                    internal var expectedRevision: Operations.putSubjectInfo.Input.Body.jsonPayload.expectedRevisionPayload?
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PUT/requestBody/json/subject`.
                    internal var subject: Components.Schemas.SubjectEdit
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - commitMessage:
                    ///   - expectedRevision: a optional object to check if input is changed by others
                    ///   - subject:
                    internal init(
                        commitMessage: Swift.String,
                        expectedRevision: Operations.putSubjectInfo.Input.Body.jsonPayload.expectedRevisionPayload? = nil,
                        subject: Components.Schemas.SubjectEdit
                    ) {
                        self.commitMessage = commitMessage
                        self.expectedRevision = expectedRevision
                        self.subject = subject
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case commitMessage
                        case expectedRevision
                        case subject
                    }
                }
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PUT/requestBody/content/application\/json`.
                case json(Operations.putSubjectInfo.Input.Body.jsonPayload)
            }
            internal var body: Operations.putSubjectInfo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.putSubjectInfo.Input.Path,
                headers: Operations.putSubjectInfo.Input.Headers = .init(),
                body: Operations.putSubjectInfo.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/put(putSubjectInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.putSubjectInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.putSubjectInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PUT/responses/401/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PUT/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.putSubjectInfo.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.putSubjectInfo.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/put(putSubjectInfo)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.putSubjectInfo.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.putSubjectInfo.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PUT/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/PUT/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.putSubjectInfo.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.putSubjectInfo.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/put(putSubjectInfo)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.putSubjectInfo.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.putSubjectInfo.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /p1/wiki/subjects/{subjectID}/covers`.
    /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/covers/get(listSubjectCovers)`.
    internal enum listSubjectCovers {
        internal static let id: Swift.String = "listSubjectCovers"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/path/subjectID`.
                internal var subjectID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - subjectID:
                internal init(subjectID: Swift.Int) {
                    self.subjectID = subjectID
                }
            }
            internal var path: Operations.listSubjectCovers.Input.Path
            /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listSubjectCovers.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listSubjectCovers.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.listSubjectCovers.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.listSubjectCovers.Input.Path,
                headers: Operations.listSubjectCovers.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/responses/200/content/json/coversPayload`.
                        internal struct coversPayloadPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/responses/200/content/json/coversPayload/creator`.
                            internal struct creatorPayload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/responses/200/content/json/coversPayload/creator/avatar`.
                                internal struct avatarPayload: Codable, Hashable, Sendable {
                                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/responses/200/content/json/coversPayload/creator/avatar/large`.
                                    internal var large: Swift.String
                                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/responses/200/content/json/coversPayload/creator/avatar/medium`.
                                    internal var medium: Swift.String
                                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/responses/200/content/json/coversPayload/creator/avatar/small`.
                                    internal var small: Swift.String
                                    /// Creates a new `avatarPayload`.
                                    ///
                                    /// - Parameters:
                                    ///   - large:
                                    ///   - medium:
                                    ///   - small:
                                    internal init(
                                        large: Swift.String,
                                        medium: Swift.String,
                                        small: Swift.String
                                    ) {
                                        self.large = large
                                        self.medium = medium
                                        self.small = small
                                    }
                                    internal enum CodingKeys: String, CodingKey {
                                        case large
                                        case medium
                                        case small
                                    }
                                }
                                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/responses/200/content/json/coversPayload/creator/avatar`.
                                internal var avatar: Operations.listSubjectCovers.Output.Ok.Body.jsonPayload.coversPayloadPayload.creatorPayload.avatarPayload
                                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/responses/200/content/json/coversPayload/creator/id`.
                                internal var id: Swift.Int
                                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/responses/200/content/json/coversPayload/creator/nickname`.
                                internal var nickname: Swift.String
                                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/responses/200/content/json/coversPayload/creator/sign`.
                                internal var sign: Swift.String
                                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/responses/200/content/json/coversPayload/creator/user_group`.
                                internal var user_group: Swift.Int
                                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/responses/200/content/json/coversPayload/creator/username`.
                                internal var username: Swift.String
                                /// Creates a new `creatorPayload`.
                                ///
                                /// - Parameters:
                                ///   - avatar:
                                ///   - id:
                                ///   - nickname:
                                ///   - sign:
                                ///   - user_group:
                                ///   - username:
                                internal init(
                                    avatar: Operations.listSubjectCovers.Output.Ok.Body.jsonPayload.coversPayloadPayload.creatorPayload.avatarPayload,
                                    id: Swift.Int,
                                    nickname: Swift.String,
                                    sign: Swift.String,
                                    user_group: Swift.Int,
                                    username: Swift.String
                                ) {
                                    self.avatar = avatar
                                    self.id = id
                                    self.nickname = nickname
                                    self.sign = sign
                                    self.user_group = user_group
                                    self.username = username
                                }
                                internal enum CodingKeys: String, CodingKey {
                                    case avatar
                                    case id
                                    case nickname
                                    case sign
                                    case user_group
                                    case username
                                }
                            }
                            /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/responses/200/content/json/coversPayload/creator`.
                            internal var creator: Operations.listSubjectCovers.Output.Ok.Body.jsonPayload.coversPayloadPayload.creatorPayload
                            /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/responses/200/content/json/coversPayload/id`.
                            internal var id: Swift.Int
                            /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/responses/200/content/json/coversPayload/raw`.
                            internal var raw: Swift.String
                            /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/responses/200/content/json/coversPayload/thumbnail`.
                            internal var thumbnail: Swift.String
                            /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/responses/200/content/json/coversPayload/voted`.
                            internal var voted: Swift.Bool
                            /// Creates a new `coversPayloadPayload`.
                            ///
                            /// - Parameters:
                            ///   - creator:
                            ///   - id:
                            ///   - raw:
                            ///   - thumbnail:
                            ///   - voted:
                            internal init(
                                creator: Operations.listSubjectCovers.Output.Ok.Body.jsonPayload.coversPayloadPayload.creatorPayload,
                                id: Swift.Int,
                                raw: Swift.String,
                                thumbnail: Swift.String,
                                voted: Swift.Bool
                            ) {
                                self.creator = creator
                                self.id = id
                                self.raw = raw
                                self.thumbnail = thumbnail
                                self.voted = voted
                            }
                            internal enum CodingKeys: String, CodingKey {
                                case creator
                                case id
                                case raw
                                case thumbnail
                                case voted
                            }
                        }
                        /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/responses/200/content/json/covers`.
                        internal typealias coversPayload = [Operations.listSubjectCovers.Output.Ok.Body.jsonPayload.coversPayloadPayload]
                        /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/responses/200/content/json/covers`.
                        internal var covers: Operations.listSubjectCovers.Output.Ok.Body.jsonPayload.coversPayload
                        /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/responses/200/content/json/current`.
                        internal struct currentPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/responses/200/content/json/current/id`.
                            internal var id: Swift.Int
                            /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/responses/200/content/json/current/raw`.
                            internal var raw: Swift.String
                            /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/responses/200/content/json/current/thumbnail`.
                            internal var thumbnail: Swift.String
                            /// Creates a new `currentPayload`.
                            ///
                            /// - Parameters:
                            ///   - id:
                            ///   - raw:
                            ///   - thumbnail:
                            internal init(
                                id: Swift.Int,
                                raw: Swift.String,
                                thumbnail: Swift.String
                            ) {
                                self.id = id
                                self.raw = raw
                                self.thumbnail = thumbnail
                            }
                            internal enum CodingKeys: String, CodingKey {
                                case id
                                case raw
                                case thumbnail
                            }
                        }
                        /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/responses/200/content/json/current`.
                        internal var current: Operations.listSubjectCovers.Output.Ok.Body.jsonPayload.currentPayload?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - covers:
                        ///   - current:
                        internal init(
                            covers: Operations.listSubjectCovers.Output.Ok.Body.jsonPayload.coversPayload,
                            current: Operations.listSubjectCovers.Output.Ok.Body.jsonPayload.currentPayload? = nil
                        ) {
                            self.covers = covers
                            self.current = current
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case covers
                            case current
                        }
                    }
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/responses/200/content/application\/json`.
                    case json(Operations.listSubjectCovers.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.listSubjectCovers.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.listSubjectCovers.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.listSubjectCovers.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/covers/get(listSubjectCovers)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.listSubjectCovers.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.listSubjectCovers.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.listSubjectCovers.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.listSubjectCovers.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/covers/get(listSubjectCovers)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.listSubjectCovers.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.listSubjectCovers.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 需要 `subjectWikiEdit` 权限
    ///
    /// - Remark: HTTP `POST /p1/wiki/subjects/{subjectID}/covers`.
    /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/covers/post(uploadSubjectCover)`.
    internal enum uploadSubjectCover {
        internal static let id: Swift.String = "uploadSubjectCover"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/POST/path/subjectID`.
                internal var subjectID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - subjectID:
                internal init(subjectID: Swift.Int) {
                    self.subjectID = subjectID
                }
            }
            internal var path: Operations.uploadSubjectCover.Input.Path
            /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.uploadSubjectCover.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.uploadSubjectCover.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.uploadSubjectCover.Input.Headers
            /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/POST/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// base64 encoded raw bytes, 4mb size limit on **decoded** size
                    ///
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/POST/requestBody/json/content`.
                    internal var content: OpenAPIRuntime.Base64EncodedData
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - content: base64 encoded raw bytes, 4mb size limit on **decoded** size
                    internal init(content: OpenAPIRuntime.Base64EncodedData) {
                        self.content = content
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case content
                    }
                }
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/POST/requestBody/content/application\/json`.
                case json(Operations.uploadSubjectCover.Input.Body.jsonPayload)
            }
            internal var body: Operations.uploadSubjectCover.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.uploadSubjectCover.Input.Path,
                headers: Operations.uploadSubjectCover.Input.Headers = .init(),
                body: Operations.uploadSubjectCover.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/POST/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIObjectContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: OpenAPIRuntime.OpenAPIObjectContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.uploadSubjectCover.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.uploadSubjectCover.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/covers/post(uploadSubjectCover)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.uploadSubjectCover.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.uploadSubjectCover.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/POST/responses/400/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.uploadSubjectCover.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.uploadSubjectCover.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/covers/post(uploadSubjectCover)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.uploadSubjectCover.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.uploadSubjectCover.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/POST/responses/401/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/POST/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.uploadSubjectCover.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.uploadSubjectCover.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/covers/post(uploadSubjectCover)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.uploadSubjectCover.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.uploadSubjectCover.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/POST/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.uploadSubjectCover.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.uploadSubjectCover.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/covers/post(uploadSubjectCover)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.uploadSubjectCover.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.uploadSubjectCover.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 为条目封面投票
    ///
    /// 需要 `subjectWikiEdit` 权限
    ///
    /// - Remark: HTTP `POST /p1/wiki/subjects/{subjectID}/covers/{imageID}/vote`.
    /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/covers/{imageID}/vote/post(voteSubjectCover)`.
    internal enum voteSubjectCover {
        internal static let id: Swift.String = "voteSubjectCover"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/{imageID}/vote/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/{imageID}/vote/POST/path/subjectID`.
                internal var subjectID: Swift.Int
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/{imageID}/vote/POST/path/imageID`.
                internal var imageID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - subjectID:
                ///   - imageID:
                internal init(
                    subjectID: Swift.Int,
                    imageID: Swift.Int
                ) {
                    self.subjectID = subjectID
                    self.imageID = imageID
                }
            }
            internal var path: Operations.voteSubjectCover.Input.Path
            /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/{imageID}/vote/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.voteSubjectCover.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.voteSubjectCover.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.voteSubjectCover.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.voteSubjectCover.Input.Path,
                headers: Operations.voteSubjectCover.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/{imageID}/vote/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/{imageID}/vote/POST/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIObjectContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: OpenAPIRuntime.OpenAPIObjectContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.voteSubjectCover.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.voteSubjectCover.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/covers/{imageID}/vote/post(voteSubjectCover)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.voteSubjectCover.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.voteSubjectCover.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/{imageID}/vote/POST/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/{imageID}/vote/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.voteSubjectCover.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.voteSubjectCover.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/covers/{imageID}/vote/post(voteSubjectCover)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.voteSubjectCover.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.voteSubjectCover.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 撤消条目封面投票
    ///
    /// 需要 `subjectWikiEdit` 权限
    ///
    /// - Remark: HTTP `DELETE /p1/wiki/subjects/{subjectID}/covers/{imageID}/vote`.
    /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/covers/{imageID}/vote/delete(unvoteSubjectCover)`.
    internal enum unvoteSubjectCover {
        internal static let id: Swift.String = "unvoteSubjectCover"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/{imageID}/vote/DELETE/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/{imageID}/vote/DELETE/path/subjectID`.
                internal var subjectID: Swift.Int
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/{imageID}/vote/DELETE/path/imageID`.
                internal var imageID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - subjectID:
                ///   - imageID:
                internal init(
                    subjectID: Swift.Int,
                    imageID: Swift.Int
                ) {
                    self.subjectID = subjectID
                    self.imageID = imageID
                }
            }
            internal var path: Operations.unvoteSubjectCover.Input.Path
            /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/{imageID}/vote/DELETE/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.unvoteSubjectCover.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.unvoteSubjectCover.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.unvoteSubjectCover.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.unvoteSubjectCover.Input.Path,
                headers: Operations.unvoteSubjectCover.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/{imageID}/vote/DELETE/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/{imageID}/vote/DELETE/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIObjectContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: OpenAPIRuntime.OpenAPIObjectContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.unvoteSubjectCover.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.unvoteSubjectCover.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/covers/{imageID}/vote/delete(unvoteSubjectCover)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.unvoteSubjectCover.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.unvoteSubjectCover.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/{imageID}/vote/DELETE/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/covers/{imageID}/vote/DELETE/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.unvoteSubjectCover.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.unvoteSubjectCover.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/covers/{imageID}/vote/delete(unvoteSubjectCover)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.unvoteSubjectCover.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.unvoteSubjectCover.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 获取当前的 wiki 信息
    ///
    /// - Remark: HTTP `GET /p1/wiki/subjects/{subjectID}/history-summary`.
    /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/history-summary/get(subjectEditHistorySummary)`.
    internal enum subjectEditHistorySummary {
        internal static let id: Swift.String = "subjectEditHistorySummary"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/history-summary/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/history-summary/GET/path/subjectID`.
                internal var subjectID: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - subjectID:
                internal init(subjectID: Swift.Int) {
                    self.subjectID = subjectID
                }
            }
            internal var path: Operations.subjectEditHistorySummary.Input.Path
            /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/history-summary/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.subjectEditHistorySummary.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.subjectEditHistorySummary.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.subjectEditHistorySummary.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.subjectEditHistorySummary.Input.Path,
                headers: Operations.subjectEditHistorySummary.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/history-summary/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/history-summary/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.HistorySummary])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: [Components.Schemas.HistorySummary] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.subjectEditHistorySummary.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.subjectEditHistorySummary.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/history-summary/get(subjectEditHistorySummary)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.subjectEditHistorySummary.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.subjectEditHistorySummary.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/history-summary/GET/responses/401/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/history-summary/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.subjectEditHistorySummary.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.subjectEditHistorySummary.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/history-summary/get(subjectEditHistorySummary)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.subjectEditHistorySummary.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.subjectEditHistorySummary.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/history-summary/GET/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/subjects/{subjectID}/history-summary/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.subjectEditHistorySummary.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.subjectEditHistorySummary.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/subjects/{subjectID}/history-summary/get(subjectEditHistorySummary)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.subjectEditHistorySummary.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.subjectEditHistorySummary.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `POST /p1/wiki/unlock/subjects`.
    /// - Remark: Generated from `#/paths//p1/wiki/unlock/subjects/post(unlockSubject)`.
    internal enum unlockSubject {
        internal static let id: Swift.String = "unlockSubject"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/p1/wiki/unlock/subjects/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.unlockSubject.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.unlockSubject.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.unlockSubject.Input.Headers
            /// - Remark: Generated from `#/paths/p1/wiki/unlock/subjects/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/unlock/subjects/POST/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/p1/wiki/unlock/subjects/POST/requestBody/json/reason`.
                    internal var reason: Swift.String
                    /// - Remark: Generated from `#/paths/p1/wiki/unlock/subjects/POST/requestBody/json/subjectID`.
                    internal var subjectID: Swift.Int
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - reason:
                    ///   - subjectID:
                    internal init(
                        reason: Swift.String,
                        subjectID: Swift.Int
                    ) {
                        self.reason = reason
                        self.subjectID = subjectID
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case reason
                        case subjectID
                    }
                }
                /// - Remark: Generated from `#/paths/p1/wiki/unlock/subjects/POST/requestBody/content/application\/json`.
                case json(Operations.unlockSubject.Input.Body.jsonPayload)
            }
            internal var body: Operations.unlockSubject.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.unlockSubject.Input.Headers = .init(),
                body: Operations.unlockSubject.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/unlock/subjects/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/unlock/subjects/POST/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIObjectContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: OpenAPIRuntime.OpenAPIObjectContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.unlockSubject.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.unlockSubject.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Default Response
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/unlock/subjects/post(unlockSubject)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.unlockSubject.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.unlockSubject.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/p1/wiki/unlock/subjects/POST/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/p1/wiki/unlock/subjects/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.unlockSubject.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.unlockSubject.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// 意料之外的服务器错误
            ///
            /// - Remark: Generated from `#/paths//p1/wiki/unlock/subjects/post(unlockSubject)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.unlockSubject.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.unlockSubject.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
